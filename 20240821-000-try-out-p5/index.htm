<!DOCTYPE html>
<html lang="en">
	<head>
		<title></title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
	</head>

	<body>
        <div id="container"></div>
		<script type="importmap">
			{
				"imports": {
					"p5": "../node_modules/p5/lib/p5.min.js"
				}
			}
		</script>
        <script type="module">

            import * as P5 from 'p5';
			import { prng_alea } from '../../node_modules/esm-seedrandom/esm/alea.min.mjs';
			import { Perlin, Simplex, Worley } from "../../node_modules/gl-noise/build/glNoise.m.js";
			import { createNoise2D, createNoise3D } from "../../node_modules/simplex-noise/dist/esm/simplex-noise.js"

			const Sketch = (p) => 
			{
				let maxSize = 500
				let wspeed = 1.66
				let hspeed = 1.33
				let w = 0
				let h = maxSize
				let r = 0;
				let _noiseSeed = Math.random(); // 1024;
				const _noiseRandom = prng_alea(_noiseSeed);
				const _noiseValue2d = createNoise2D(_noiseRandom);
				const _noiseXmultiplier = 0.002;
				const _noiseYmultiplier = 0.002;
				let _noiseTime = 10.0;
				const _noiseTimeOffset = 1.1;

				// Calling p5.js functions, using the variable 'p'
				p.setup = () => 
				{
					// Creating a canvas using the entire screen of the webpage

					console.log(Simplex);
					
					p.createCanvas(800, 800);
					p.strokeWeight(5);
					p.background(255);

				}

				p.draw = () => 
				{
					// Clear the frame
					p.background(255, 50)

					// Load the pixels array.
					p.loadPixels();

					var d = true;

					for (let h = 0; h < p.height; h++) 
					{

						for (let w = 0; w < p.width; w++) 
						{
							let i = (h * p.width + w) * 4;

							let v = _noiseValue2d((w  + _noiseTime) * _noiseXmultiplier, (h + _noiseTime) * _noiseYmultiplier);
							let c = 128 + (v * 128);

							// console.log(v);

							p.pixels[i] = c;		// red 
							p.pixels[i+1] = c;		// green
							p.pixels[i+2] = c;		// blue
							p.pixels[i+3] = 255;	// alpha

							if(d == true)
							{
								console.log((w  + _noiseTime) * _noiseXmultiplier);

								d = false;
							}
						
						}
					}

					// Update the canvas.
					p.updatePixels();

					// Draw an ellipse
					// p.translate(p.width / 2, p.height / 2)
					// p.rotate(r)
					// p.fill(0, 1)
					// p.stroke(5)
					// p.ellipse(0, 0, w, h)

					// // Updating rotation and increment values
					// r = r + 0.015
					// w = w + wspeed
					// h = h + hspeed
					// if (w < 0 || w > maxSize) wspeed *= -1
					// if (h < 0 || h > maxSize) hspeed *= -1

					_noiseTime += _noiseTimeOffset;	
					
					// console.log(_noiseTime);
				}

				p.windowResized = () => 
				{
					p.resizeCanvas(window.innerWidth, window.innerHeight)
				}
			}

			new p5(Sketch, document.getElementById('container'));

        </script>
    </body>
</html>        