<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js - pointerlock controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<style>
			#blocker {
				position: absolute;
				width: 100%;
				height: 100%;
				background-color: rgba(0,0,0,0.5);
			}

			#instructions {
				width: 100%;
				height: 100%;

				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;

				text-align: center;
				font-size: 14px;
				cursor: pointer;
			}
		</style>
	</head>
	<body>
		<div id="blocker">
			<div id="instructions">
				<p style="font-size:36px">
					Click to play
				</p>
				<p>
					Move: WASD<br/>
					Jump: SPACE<br/>
					Look: MOUSE
				</p>
			</div>
		</div>

		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/"
				}
			}
		</script>

		<script type="module">

			import * as THREE from 'three';

			import { PointerLockControls } from 'three/addons/controls/PointerLockControls.js';
			import { CameraControls } from './.js/CameraControls.js';

			let camera, scene, renderer, controls;
			let sceneGroup0, sceneGroup1;

			// const objects = [];

			// let raycaster;

			let moveForward = false;
			let moveBackward = false;
			let moveLeft = false;
			let moveRight = false;
			let canJump = false;
			let moveUp = false;
			let moveDown = false;

			let prevTime = performance.now();
			const velocity = new THREE.Vector3();
			const direction = new THREE.Vector3();
			const vertex = new THREE.Vector3();
			const color = new THREE.Color();

			init();

			function init() 
			{

				renderer = new THREE.WebGLRenderer( { antialias: true, stencil : true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.setAnimationLoop( animate );

				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.01, 100 );
				camera.position.y = 1.8;
				camera.position.z = 5;

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0xffffff );
				// scene.fog = new THREE.Fog( 0xffffff, 0, 750 );

				sceneGroup0 = new THREE.Group();
				scene.add( sceneGroup0 );				

				sceneGroup1 = new THREE.Group();
				// scene.add( sceneGroup1 );				

				// const light = new THREE.HemisphereLight( 0xeeeeff, 0x777788, 2.5 );
				// light.position.set( 0.5, 1, 0.75 );
				// scene.add( light );

				// const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
				// scene.add( directionalLight );

				const lights = [];
			lights[ 0 ] = new THREE.DirectionalLight( 0xffffff, 3 );
			// lights[ 1 ] = new THREE.DirectionalLight( 0xffffff, 3 );
			// lights[ 2 ] = new THREE.DirectionalLight( 0xffffff, 3 );

			lights[ 0 ].position.set( 200, 50, 100 );
			// lights[ 1 ].position.set( 100, 200, 100 );
			// lights[ 2 ].position.set( - 100, - 200, - 100 );

			scene.add( lights[ 0 ] );
			// scene.add( lights[ 1 ] );
			// scene.add( lights[ 2 ] );				

				controls = new CameraControls( camera, document.body );

				const blocker = document.getElementById( 'blocker' );
				const instructions = document.getElementById( 'instructions' );

				instructions.addEventListener( 'click', function () {

					controls.lock();

				} );

				controls.addEventListener( 'lock', function () {

					instructions.style.display = 'none';
					blocker.style.display = 'none';

				} );

				controls.addEventListener( 'unlock', function () {

					blocker.style.display = 'block';
					instructions.style.display = '';

				} );

				scene.add( controls.object );

				const onKeyDown = function ( event ) {

					switch ( event.code ) {

						case 'ArrowUp':
						case 'KeyW':
							moveForward = true;
							break;

						case 'ArrowLeft':
						case 'KeyA':
							moveLeft = true;
							break;

						case 'ArrowDown':
						case 'KeyS':
							moveBackward = true;
							break;

						case 'ArrowRight':
						case 'KeyD':
							moveRight = true;
							break;

						case 'PageUp':
						case 'KeyR':
							moveUp = true;
							break;

						case 'PageDown':
						case 'KeyF':
							moveDown = true;
							break;

						case 'Space':
							if ( canJump === true ) velocity.y += 3.50;
							canJump = false;
							break;

					}

				};

				const onKeyUp = function ( event ) {

					switch ( event.code ) {

						case 'ArrowUp':
						case 'KeyW':
							moveForward = false;
							break;

						case 'ArrowLeft':
						case 'KeyA':
							moveLeft = false;
							break;

						case 'ArrowDown':
						case 'KeyS':
							moveBackward = false;
							break;

						case 'ArrowRight':
						case 'KeyD':
							moveRight = false;
							break;

						case 'PageUp':
						case 'KeyR':
							moveUp = false;
							break;

						case 'PageDown':
						case 'KeyF':
							moveDown = false;
							break;

					}

				};

				document.addEventListener( 'keydown', onKeyDown );
				document.addEventListener( 'keyup', onKeyUp );			


				let geometry = new THREE.PlaneGeometry( 10, 10, 10, 10 );
				let material = new THREE.MeshPhongMaterial( { color: 0xffd500, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );//new THREE.MeshBasicMaterial( {color: 0xff0000, side: THREE.FrontSide } );
				let plane = new THREE.Mesh( geometry, material );
				plane.rotateX( - Math.PI / 2 );
				sceneGroup0.add( plane );

				const boxGeometry = new THREE.BoxGeometry( 1, 1, 1 ).toNonIndexed();

				for ( let i = 0; i < 4; i ++ ) {

					const boxMaterial = new THREE.MeshPhongMaterial( { color: 0xffd500, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );

					const box = new THREE.Mesh( boxGeometry, boxMaterial );
					box.position.x = Math.floor( -4 + Math.random() * 8);
					box.position.y = 0.5;
					box.position.z = Math.floor( -4 + Math.random() * 8 );

					sceneGroup0.add( box );
				}


				
				// geometry = new THREE.PlaneGeometry( 10, 10, 10, 10 );
				// material = new THREE.MeshPhongMaterial( { color: 0xff1100, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );
				// plane = new THREE.Mesh( geometry, material );
				// plane.rotateX( - Math.PI / 2 );
				// sceneGroup1.add( plane );
				// // sceneGroup1.translateX (12);

				// const sphereGeometry = new THREE.SphereGeometry(0.5).toNonIndexed();

				// for ( let i = 0; i < 4; i ++ ) {

				// 	// const sphereMaterial = new THREE.MeshPhongMaterial( { color: 0xff1100, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );
				// 	const sphereMaterial = new THREE.MeshPhongMaterial( { color: 0xff1100 } );

				// 	const sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );
				// 	sphere.position.x = Math.floor( -4 + Math.random() * 8);
				// 	sphere.position.y = 0.5;
				// 	sphere.position.z = Math.floor( -4 + Math.random() * 8 );

				// 	sceneGroup1.add( sphere );
				// }

				const setStencilMaterialRecursive = function(mesh, stencilWrite, stencilRef, stencilFunc)
				{
					if(mesh === undefined || mesh === null)
					{
						return;						
					}

					if(mesh.material !== undefined && mesh.material !== null)
					{
						mesh.material.stencilWrite = stencilWrite;
						mesh.material.stencilFunc =  stencilFunc;
						mesh.material.stencilRef =  stencilRef;
						// mesh.material.stencilFuncMask =  0xFF;
						// mesh.material.stencilFail =  stencilFail;
						// mesh.material.stencilZFail =  stencilZFail;
						//  mesh.material.stencilZPass =  stencilZPass;					
					}

					if(mesh.children === undefined || mesh.children === null || mesh.children.length === 0)
					{
						return;		
					}

					for(let i = 0; i < mesh.children.length; i++)
					{
						setStencilMaterialRecursive(mesh.children[i], stencilWrite, stencilRef, stencilFunc);
					}
				}

				const addPortal = function(group, objectGeom, objectColor, stencilRef, planePos, planeRot ) 
				{
						// CUBE FACE
						const planeGeom = new THREE.PlaneGeometry();
						const stencilMat = new THREE.MeshPhongMaterial({ color: 'white' });
						stencilMat.depthWrite = false;
						stencilMat.stencilWrite = true;
						stencilMat.stencilRef = stencilRef;
						stencilMat.stencilFunc = THREE.AlwaysStencilFunc;
						stencilMat.stencilZPass = THREE.ReplaceStencilOp;
						const stencilMesh = new THREE.Mesh(planeGeom, stencilMat);
						stencilMesh.position.copy(planePos);
						stencilMesh.rotation.x = planeRot.x;
						stencilMesh.rotation.y = planeRot.y;
						stencilMesh.rotation.z = planeRot.z;
						stencilMesh.renderOrder = 2;

						scene.add(stencilMesh);

						setStencilMaterialRecursive(group, true, stencilRef, THREE.EqualStencilFunc);

						const g = new THREE.Group();

						const geometry = new THREE.PlaneGeometry( 10, 10, 10, 10 );
						const material = new THREE.MeshPhongMaterial( { color: 0xff1100, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );
						material.stencilWrite = true;
						material.stencilRef = stencilRef;
						material.stencilFunc = THREE.EqualStencilFunc;
						const plane = new THREE.Mesh( geometry, material );
						plane.rotateX( - Math.PI / 2 );
						plane.renderOrder = 3;

						g.add(plane);

						const sphereGeometry = new THREE.SphereGeometry(0.5).toNonIndexed();

						for ( let i = 0; i < 4; i ++ ) {

							const sphereMaterial = new THREE.MeshPhongMaterial( { color: 0xff1100, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );
							// const sphereMaterial = new THREE.MeshPhongMaterial( { color: 0xff1100 } );
							sphereMaterial.stencilWrite = true;
							sphereMaterial.stencilRef = stencilRef;
							sphereMaterial.stencilFunc = THREE.EqualStencilFunc;

							const sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );
							sphere.position.x = Math.floor( -4 + Math.random() * 8);
							sphere.position.y = 0.5;
							sphere.position.z = Math.floor( -4 + Math.random() * 8 );
							sphere.renderOrder = 3;

							g.add( sphere );
						}

						
						scene.add( g );

					
						// OBJECT INSIDE CUBE
						const objectMat = new THREE.MeshPhongMaterial({ color: objectColor});
						objectMat.stencilWrite = true;
						objectMat.stencilRef = stencilRef;
						objectMat.stencilFunc = THREE.EqualStencilFunc;
						const object = new THREE.Mesh(objectGeom, objectMat);
						object.position.copy(planePos);
						object.renderOrder = 3;

						scene.add( object );				

				}		
				
				// addPortal(new THREE.ConeGeometry(0.25, 0.5, 4), 0x0000FF, 1, new THREE.Vector3(0, 0 , 0), new THREE.Vector3(0, 0, 0));
				addPortal(sceneGroup1, new THREE.ConeGeometry(0.25, 0.5, 4), 'red', 1, new THREE.Vector3(0, 1, 0.5), new THREE.Vector3(0,0,0));
				scene.add( sceneGroup1 );
				// addPortal(new THREE.CylinderGeometry(0.15, 0.15, 0.5), 'yellow', 2, new THREE.Vector3(0,0.5,0), new THREE.Vector3(- Math.PI / 2,0,0));
				// addPortal(new THREE.OctahedronGeometry(0.25), 'green', 3, new THREE.Vector3(0,-0.5,0), new THREE.Vector3( Math.PI / 2,0,0));
				// addPortal(new THREE.TorusGeometry(0.25, 0.1), 'blue', 4, new THREE.Vector3(0,0,-0.5), new THREE.Vector3( Math.PI,0,0));
				// addPortal(new THREE.ConeGeometry(0.25, 0.5), 'orange', 5, new THREE.Vector3(-0.5,0,0), new THREE.Vector3( 0, -Math.PI / 2,0));
				// addPortal(new THREE.BoxGeometry(0.5, 0.5, 0.5), 'brown', 6, new THREE.Vector3(0.5,0,0), new THREE.Vector3( 0, Math.PI / 2,0));

				document.body.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				const time = performance.now();

				if ( controls.isLocked === true ) {

					// raycaster.ray.origin.copy( controls.object.position );
					// raycaster.ray.origin.y -= 10;

					// const intersections = raycaster.intersectObjects( objects, false );

					// const onObject = intersections.length > 0;

					const delta = ( time - prevTime ) / 1000;

					velocity.x -= velocity.x * 10.0 * delta;
					velocity.y -= velocity.y * 10.0 * delta;
					velocity.z -= velocity.z * 10.0 * delta;

					// velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

					direction.z = Number( moveForward ) - Number( moveBackward );
					direction.y = Number( moveUp ) - Number( moveDown );
					direction.x = Number( moveRight ) - Number( moveLeft );
					direction.normalize(); // this ensures consistent movements in all directions

					if ( moveForward || moveBackward ) velocity.z -= direction.z * 40.0 * delta;
					if ( moveLeft || moveRight ) velocity.x -= direction.x * 40.0 * delta;
					if ( moveUp || moveDown ) velocity.y -= direction.y * 40.0 * delta;

					// if ( onObject === true ) {

					// 	velocity.y = Math.max( 0, velocity.y );
					// 	canJump = true;

					// }

					controls.moveRight( - velocity.x * delta );
					controls.moveUp( - velocity.y * delta );
					controls.moveForward( - velocity.z * delta );

					// controls.object.position.y += ( velocity.y * delta ); // new behavior

					// if ( controls.object.position.y < 1 ) {

					// 	velocity.y = 0;
					// 	controls.object.position.y = 1;

					// 	canJump = true;

					// }

				}

				prevTime = time;

				renderer.render( scene, camera );

			}

		</script>
	</body>
</html>