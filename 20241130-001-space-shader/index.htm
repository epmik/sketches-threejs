<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>
        <div id="sketch-container"></div>
		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "../scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js"
				}
			}
		</script>
                <script type="module">
        
                    import * as THREE from 'three';
                    
                    import { RandomGenerator } from '/js/RandomGenerator.js';

                    import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
                    import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
                    import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
        
                    import { RGBShiftShader } from 'three/addons/shaders/RGBShiftShader.js';
                    import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
        
                    import * as Shaders from './.shaders/Export.module.js';
        			import * as Postprocessing from './.postprocessing/Export.module.js';

                    let camera, renderer, composer;
                    let object, _randomGenerator;
        
                    init();
        
                    function init() {
        
                        _randomGenerator = new RandomGenerator(1204);

                        renderer = new THREE.WebGLRenderer();
                        renderer.setPixelRatio( window.devicePixelRatio );
                        renderer.setSize( window.innerWidth, window.innerHeight );
                        renderer.setAnimationLoop( animate );
                        document.body.appendChild( renderer.domElement );
        
                        //
        
                        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
                        camera.position.z = 400;
        
                        const scene = new THREE.Scene();
                        scene.fog = new THREE.Fog( 0x000000, 1, 1000 );
        
                        object = new THREE.Object3D();
                        scene.add( object );
        
                        const geometry = new THREE.SphereGeometry( 1, 4, 4 );
                        // const material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );
        
                        for ( let i = 0; i < 100; i ++ ) {
        
                            const mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { color: new THREE.Color().setRGB( _randomGenerator.Value(), _randomGenerator.Value(), _randomGenerator.Value()), flatShading: true } ));
                            mesh.position.set( _randomGenerator.Value() - 0.5, _randomGenerator.Value() - 0.5, _randomGenerator.Value() - 0.5 ).normalize();
                            mesh.position.multiplyScalar( _randomGenerator.Value() * 400 );
                            mesh.rotation.set( _randomGenerator.Value() * 2, _randomGenerator.Value() * 2, _randomGenerator.Value() * 2 );
                            mesh.scale.x = mesh.scale.y = mesh.scale.z = _randomGenerator.Value() * 50;
                            object.add( mesh );
        
                        }
        
                        scene.add( new THREE.AmbientLight( 0xcccccc ) );
        
                        const light = new THREE.DirectionalLight( 0xffffff, 3 );
                        light.position.set( 1, 1, 1 );
                        scene.add( light );
        
                        // postprocessing
        
                        composer = new EffectComposer( renderer );
                        composer.addPass( new RenderPass( scene, camera ) );
        
                        const effect1 = new ShaderPass( Shaders.DotScreenShader );
                        effect1.uniforms[ 'scale' ].value = 4;
                        composer.addPass( effect1 );
        
                        // const effect2 = new ShaderPass( RGBShiftShader );
                        // effect2.uniforms[ 'amount' ].value = 0.0030;
                        // composer.addPass( effect2 );
        
                        const effect3 = new OutputPass();
                        composer.addPass( effect3 );
        
                        //
        
                        window.addEventListener( 'resize', onWindowResize );
        
                    }
        
                    function onWindowResize() {
        
                        camera.aspect = window.innerWidth / window.innerHeight;
                        camera.updateProjectionMatrix();
        
                        renderer.setSize( window.innerWidth, window.innerHeight );
                        composer.setSize( window.innerWidth, window.innerHeight );
        
                    }
        
                    function animate() {
        
                        object.rotation.x += 0.005;
                        object.rotation.y += 0.01;
        
                        composer.render();
        
                    }
        
                </script>
        
            </body>
        </html>