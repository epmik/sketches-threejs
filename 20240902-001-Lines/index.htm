<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>
        <div id="container"></div>
		<script type="importmap">
			{
				"imports": {
					"three": "../node_modules/three/build/three.module.js",
					"scrblr": "../scrblr/scrblr.module.js",
					"pngjs": "../node_modules/pngjs/browser.js",
					"three/addons/": "../jsm/"
				}
			}
		</script>

        <script type="module">

            import * as THREE from 'three';
			import * as Scrblr from 'scrblr';
			import Stats from 'three/addons/libs/stats.module.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
            import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { prng_alea } from '../../node_modules/esm-seedrandom/esm/alea.min.mjs';
			import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
			import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
			import { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';
			import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
			import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
			import { LuminosityShader } from 'three/addons/shaders/LuminosityShader.js';
            import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';
            import { Line2 } from "three/addons/lines/Line2.js";
            import { LineMaterial } from "three/addons/lines/LineMaterial.js";
            import { LineGeometry } from "three/addons/lines/LineGeometry.js";

            let _screenCapturePrefix = "00000000.000.Template-with-animated-model-and-lighting";
            let _effectsComposer, _useEffectsComposer = false;
            let scene, renderer, camera, stats, controls;
            let modelMarine, modelForestHouse, modelLittleTokyo, skeletonMarine, mixerMarine, mixerLittleTokyo;
            let spotLight, spotLightHelper;
            let _canvasWidth = 800, _canvasHeight = 800;
            let _near = 1, _far = 1000, _fov = 60;
            let _clock, _deltaTime, _time;
            let _spotlightAngle = Math.PI, _spotlightRotateSpeed = Math.PI * 0.125;

            const crossFadeControls = [];

            let idleAction, walkAction, runAction;
            let idleWeight, walkWeight, runWeight;
            let actionsMarine, settings;
            let textureMap, textureCube;

            let singleStepMode = false;
            let sizeOfNextStep = 0;

            var line, material;
            var MAX_POINTS = 500;
            var drawCount = 0;            

            init();

            async function init() {

                const container = document.getElementById( 'container' );

                _canvasWidth = _canvasWidth === undefined ? window.innerWidth : _canvasWidth;
                _canvasHeight = _canvasHeight === undefined ? window.innerHeight : _canvasHeight;

                renderer = new THREE.WebGLRenderer( { antialias: true, stencil: true, alpha: true } );
                renderer.setPixelRatio( window.devicePixelRatio );
                renderer.setSize( _canvasWidth, _canvasHeight );
                renderer.shadowMap.enabled = true;
                container.appendChild( renderer.domElement );

                camera = new THREE.PerspectiveCamera( _fov, _canvasWidth /_canvasHeight, _near, _far );
                camera.position.set( 1, 4, -6);
                camera.lookAt( 0, 1, 0 );

                controls = new OrbitControls( camera, renderer.domElement );
				controls.minDistance = 2;
				controls.maxDistance = 12;
				controls.maxPolarAngle = Math.PI / 2;
				controls.target.set( 0, 1, 0 );
				controls.update();                

                // scene
	            scene = new THREE.Scene();

                // geometry
                var geometry = new LineGeometry();

                // attributes
                var positions = new Float32Array( MAX_POINTS * 3 ); // 3 vertices per point
                geometry.setPositions( positions);


                // material
                material = new LineMaterial( { color: 0xff0000, linewidth: 2 } );
                material.resolution.set( window.innerWidth, window.innerHeight );

                // line
                line = new Line2( geometry,  material );
                scene.add( line );

                // update positions
                updatePositions();                
                
                ////////////

                if(_useEffectsComposer)
                {
                    _effectsComposer = new EffectComposer( renderer );

                    const renderPass = new RenderPass( scene, camera );
                    _effectsComposer.addPass( renderPass );

                    const glitchPass = new GlitchPass();
                    _effectsComposer.addPass( glitchPass );

                    const outputPass = new OutputPass();
                    _effectsComposer.addPass( outputPass );

                    console.log("Using Effects Composer");
                }
                else
                {
                    console.log("Not using Effects Composer");
                }


                // createGui();


                _clock = new THREE.Clock();



                renderer.setAnimationLoop( update );



                stats = new Stats();
                container.appendChild( stats.dom );



                window.addEventListener( 'resize', onWindowResize );

            }

            function updatePositions() 
            {
                //var positions = line.geometry.attributes.position.array;
                var positions =[ ];
                var x = 0;
                var y = 0;
                var z = 0;
                var index = 0;

                for ( var i = 0, l = MAX_POINTS; i < l; i ++ ) 
                {
                    x += ( Math.random() - 0.5 ) * 30;
                    y += ( Math.random() - 0.5 ) * 30;
                    z += ( Math.random() - 0.5 ) * 30;

                    positions[ index ++ ] = x;
                    positions[ index ++ ] = y;
                    positions[ index ++ ] = z;
                }

                line.geometry.setPositions(positions);

                material.linewidth = 1 + Math.random() * 8;
                material.needsUpdate = true;
            }            

            function createGui() {

                const panel = new GUI( { width: 310, closeFolders: true } );

                const folderAnimation = panel.addFolder( 'Animation' );
                const folderLighting = panel.addFolder( 'Lighting' );
                const folderShading = panel.addFolder( 'Shading' );
                const folderModels = panel.addFolder( 'Models' );

                folderAnimation.add( settings, 'deactivate/activate animation');
				folderAnimation.add( settings, 'pause/continue animation' );

                crossFadeControls.push( folderAnimation.add( settings, 'from walk to idle' ) );
                crossFadeControls.push( folderAnimation.add( settings, 'from idle to walk' ) );
                crossFadeControls.push( folderAnimation.add( settings, 'from walk to run' ) );
                crossFadeControls.push( folderAnimation.add( settings, 'from run to walk' ) );

                folderAnimation.add( settings, 'duration', 0, 4, 0.025 );

                folderLighting.addColor( settings, 'color' ).onChange( function ( val ) { spotLight.color.setHex( val ); } );

                folderLighting.add( settings, 'intensity', 0, 500 ).onChange( function ( val ) { spotLight.intensity = val; } );

                folderLighting.add( settings, 'distance', 0, 20 ).onChange( function ( val ) { spotLight.distance = val; } );

                folderLighting.add( settings, 'angle', 0, Math.PI / 3 ).onChange( function ( val ) { spotLight.angle = val; } );

                folderLighting.add( settings, 'penumbra', 0, 1 ).onChange( function ( val ) { spotLight.penumbra = val; } );

                folderLighting.add( settings, 'decay', 1, 2 ).onChange( function ( val ) { spotLight.decay = val; } );

                folderLighting.add( settings, 'shadows' ).onChange( function ( val ) 
                { 
                    renderer.shadowMap.enabled = val; 

                    scene.traverse( function ( child ) 
                    {
                        if ( child.material ) 
                        {
                            child.material.needsUpdate = true;
                        }

                    } );
                } );

                folderShading.add( settings, 'materialIndex', [ 'default', 'wireframe', 'flat', 'smooth', 'glossy', 'textured', 'reflective' ] ).name( 'Shading' ).onChange( function(val) 
                {
                    let material = settings.materials[settings.materialIndex];
                    let model = settings.models[settings.modelIndex];

                    model.traverse( function ( child ) 
                    {
                        if ( child.material && child.isMesh) 
                        {
                            child.material = material === null ? child.userData.defaultMaterial : material;
                            child.material.needsUpdate = true;
                        }

                    } );
                } );

                folderModels.add( settings, 'modelIndex', [ 'marine', 'forest house' , 'little tokyo' ] ).name( 'Model' ).onChange( function(val) 
                {
                    for (let m in settings.models) 
                    {
                        settings.models[m].visible = false;
                    }

                    let model = settings.models[settings.modelIndex];

                    model.visible = true;
                } );

                panel.add(settings, 'downloadWebGLRendererAction').name('Save screen');
                panel.add(settings, 'downloadWebGLRendererHiresAction').name('Save hires screen');

                folderAnimation.close();
                folderLighting.close();
                folderShading.close();
                folderModels.close();
            }

            function deactivateActivateAllActions() 
            {
                if(actionsMarine.enabled)
                {
                    actionsMarine.forEach( function ( action ) 
                    {
                        action.stop();
                    });
                }
                else
                {
                    setWeight( idleAction, settings[ 'modify idle weight' ] );
                    setWeight( walkAction, settings[ 'modify walk weight' ] );
                    setWeight( runAction, settings[ 'modify run weight' ] );

                    actionsMarine.forEach( function ( action ) {

                        action.play();

                    } );
                }
                actionsMarine.enabled = !actionsMarine.enabled;
            }

            function activateAllActions() {

                setWeight( idleAction, settings[ 'modify idle weight' ] );
                setWeight( walkAction, settings[ 'modify walk weight' ] );
                setWeight( runAction, settings[ 'modify run weight' ] );

                actionsMarine.forEach( function ( action ) {

                    action.play();

                } );

            }

			function pauseContinue() 
            {
                if ( idleAction.paused ) 
                {
                    unPauseAllActions();
                } 
                else 
                {
                    pauseAllActions();
                }
            }

			function pauseAllActions() 
            {
                actionsMarine.forEach( function ( action ) {

                    action.paused = true;

                } );
            }

            function unPauseAllActions() 
            {
                actionsMarine.forEach( function ( action ) {

                    action.paused = false;

                } );
            }

            function prepareCrossFade( startAction, endAction, defaultDuration ) 
            {

                // Switch default / custom crossfade duration (according to the user's choice)

                const duration = setCrossFadeDuration( defaultDuration );

                // Make sure that we don't go on in singleStepMode, and that all actions are unpaused

                singleStepMode = false;
                unPauseAllActions();

                // If the current action is 'idle' (duration 4 sec), execute the crossfade immediately;
                // else wait until the current action has finished its current loop

                if ( startAction === idleAction ) {

                    executeCrossFade( startAction, endAction, duration );

                } else {

                    synchronizeCrossFade( startAction, endAction, duration );

                }
            }

            function setCrossFadeDuration( defaultDuration ) 
            {
                return settings[ 'duration' ];
            }

            function synchronizeCrossFade( startAction, endAction, duration ) 
            {

                mixerMarine.addEventListener( 'loop', onLoopFinished );

                function onLoopFinished( event ) {

                    if ( event.action === startAction ) {

                        mixerMarine.removeEventListener( 'loop', onLoopFinished );

                        executeCrossFade( startAction, endAction, duration );

                    }
                }
            }

            function executeCrossFade( startAction, endAction, duration ) 
            {
                // Not only the start action, but also the end action must get a weight of 1 before fading
                // (concerning the start action this is already guaranteed in this place)

                setWeight( endAction, 1 );
                endAction.time = 0;

                // Crossfade with warping - you can also try without warping by setting the third parameter to false

                startAction.crossFadeTo( endAction, duration, true );
            }

            // This function is needed, since animationAction.crossFadeTo() disables its start action and sets
            // the start action's timeScale to ((start animation's duration) / (end animation's duration))

            function setWeight( action, weight ) 
            {
                action.enabled = true;
                action.setEffectiveTimeScale( 1 );
                action.setEffectiveWeight( weight );
            }

            // Called by the render loop

            // function updateWeightSliders() {

            //     settings[ 'modify idle weight' ] = idleWeight;
            //     settings[ 'modify walk weight' ] = walkWeight;
            //     settings[ 'modify run weight' ] = runWeight;

            // }

            // Called by the render loop

            function updateCrossFadeControls() 
            {
                if ( idleWeight === 1 && walkWeight === 0 && runWeight === 0 ) 
                {
                    crossFadeControls[ 0 ].disable();
                    crossFadeControls[ 1 ].enable();
                    crossFadeControls[ 2 ].disable();
                    crossFadeControls[ 3 ].disable();
                }

                if ( idleWeight === 0 && walkWeight === 1 && runWeight === 0 ) 
                {
                    crossFadeControls[ 0 ].enable();
                    crossFadeControls[ 1 ].disable();
                    crossFadeControls[ 2 ].enable();
                    crossFadeControls[ 3 ].disable();
                }

                if ( idleWeight === 0 && walkWeight === 0 && runWeight === 1 ) 
                {
                    crossFadeControls[ 0 ].disable();
                    crossFadeControls[ 1 ].disable();
                    crossFadeControls[ 2 ].disable();
                    crossFadeControls[ 3 ].enable();
                }
            }

            function onWindowResize() 
            {
                camera.aspect = _canvasWidth / _canvasHeight;
                camera.updateProjectionMatrix();

                renderer.setSize( _canvasWidth, _canvasHeight );

                if(_useEffectsComposer)
                {
                    _effectsComposer.setSize( _canvasWidth, _canvasHeight );
                }
            }

            function update() 
            {
				_deltaTime = _clock.getDelta();

				_time += _deltaTime;


                drawCount = ( drawCount + 1 ) % MAX_POINTS;
                
                line.geometry.maxInstancedCount = drawCount;

                if ( drawCount === 0 ) {

                    // periodically, generate new data

                    updatePositions();

                    line.material.color.setHSL( Math.random(), 1, 0.5 );

                }                
                
                if(_useEffectsComposer)
                {
                    _effectsComposer.render();
                }
                else
                {
                    renderer.render( scene, camera );
                }

                stats.update();
            }

			function _downloadWebGLRenderer(hiresScale)
			{
                _downloadScaledWebGLRenderer(hiresScale === undefined ? 1 : hiresScale);
			}

			function _downloadScaledWebGLRenderer(hiresScale)
			{
                const width = Math.round(_canvasWidth * hiresScale);
                const height = Math.round(_canvasHeight * hiresScale);

				const maxW = 2400;
				const maxH = 2400;

				const d = new Date();
				const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

				for (let y = 0; y < height; y += maxH)
				{
					for (let x = 0; x < width; x += maxW)
					{
						let w = Math.min(width - x, maxW);
						let h = Math.min(height - y, maxH);

						// console.log(prefix + '-' + x + '-' + y + '.png');

						renderer.setSize( w, h );
                        if(_useEffectsComposer)
                        {
                            _effectsComposer.setSize(w, h);
                        }

						camera.setViewOffset(width, height, x, y, w, h);
						
                        if(_useEffectsComposer)
                        {
                            _effectsComposer.render();
                        }
                        else
                        {
                            renderer.render(scene, camera);
                        }

                        _downloadCanvasAsPng(renderer.domElement, prefix + '-' + x + '-' + y + '.png');
					}
				}

                renderer.setSize( _canvasWidth, _canvasHeight );

                if(_useEffectsComposer)
                {
                    _effectsComposer.setSize(_canvasWidth, _canvasHeight);
                }

                camera.clearViewOffset();
			}

			function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			{
				let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

				webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

				var canvas = document.createElement('canvas');

				canvas.width = webGLRenderTarget.width;
				canvas.height = webGLRenderTarget.height;

				var context = canvas.getContext('2d');

				context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

				_downloadCanvasAsPng(canvas);
			}

			function _downloadCanvasAsPng(canvas, name)
			{
				if(name === null || name === undefined || name === "")
				{
					var d = new Date();

					name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
				}

				canvas.toBlob(function (blob) {
					var a = document.createElement('a');
					var url = URL.createObjectURL(blob);
					a.href = url;
					a.download = name;
					a.click();
				}, 'image/png', 1.0); 
			}

        </script>
    </body>
</html>        