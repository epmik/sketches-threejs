<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>
        <div id="canvas-container">
            <div id="gui-container">
            </div>
            <div id="info-container">
                <div id="info-help-container">
                    <div class="clickable" target="F9">Help (F9)</div>
                </div>
                <div id="info-text-container">
                    <div class="clickable" target="F9">Toggle this information - F9</div>
                    <div class="clickable" target="F5">Refresh page - F5</div>
                    <div class="clickable" target="F10">Toggle GUI - F10</div>
                    <div class="clickable" target="F11">Toggle fullscreen - F11</div>
                </div>
            </div>
        </div>
		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "../scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js",
                    "p5": "https://cdn.jsdelivr.net/npm/p5@1.11.2/+esm"
				}
			}
		</script>

        <script type="module">

            import $ from 'https://cdn.jsdelivr.net/npm/jquery@3.7.1/+esm'
            import * as THREE from 'three';
			import * as SCRBLR from 'scrblr';
            import p5 from 'https://cdn.jsdelivr.net/npm/p5@1.11.2/+esm';
            import * as P5 from 'p5';
			// import { Sketch } from './js/sketch.js';
            import { Graphics } from './js/Graphics.js';
            import { RandomGenerator } from '/js/RandomGenerator.js';
			import { OpenSimplexNoiseGenerator } from '/js/OpenSimplexNoiseGenerator.js';
			import { SummedNoiseGenerator } from '/js/SummedNoiseGenerator.js';
			import { MathUtility } from '/js/MathUtility.js';
			import { Color } from '/js/Color.js';
			import Stats from 'three/addons/libs/stats.module.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import * as Shaders from './.shaders/Export.module.js';

            let _minCanvasWidth = 400, _minCanvasHeight = 400;
            let _canvasHeight = _minCanvasHeight, _canvasWidth = _minCanvasWidth;
            let _frameCount = 0;
			let _mouseTimer = null;
            let _offscreenGraphics;

            let _randomGenerator;       
            let _noiseGenerator;   
            
            let _vibrantColorsShader;
            
            let settings = {
                squareCanvas: false,
            }

			const Sketch = (p) => 
			{

				p.setup = () => 
				{
                    _randomGenerator = new RandomGenerator();
                    _noiseGenerator = new OpenSimplexNoiseGenerator();

					p.createCanvas(_canvasWidth, _canvasHeight, "webgl");

                    _offscreenGraphics = p.createGraphics(_canvasWidth, _canvasHeight, "webgl");

                    p.resize();

                    _vibrantColorsShader = p.createShader(Shaders.VibrantColorsShader.vertexShader, Shaders.VibrantColorsShader.fragmentShader);  
                    
                    _vibrantColorsShader.setUniform("coverPercentage", 0.75);
                    _vibrantColorsShader.setUniform("minHue", -0.025);
                    _vibrantColorsShader.setUniform("maxHue", 0.025);
                    _vibrantColorsShader.setUniform("minSaturation", -0.025);
                    _vibrantColorsShader.setUniform("maxSaturation", 0.025);
                    _vibrantColorsShader.setUniform("minBrightness", -0.015);
                    _vibrantColorsShader.setUniform("maxBrightness", 0.015);
                    _vibrantColorsShader.setUniform("minContrast" -0.015);
                    _vibrantColorsShader.setUniform("maxContrast", 0.015);
                    _vibrantColorsShader.setUniform("seed", 1);//Date.now());
                    _vibrantColorsShader.setUniform("coverPercentage", 0.5);
                    

                    window.addEventListener( 'focus', function() { console.log('window focus') } );
                    window.addEventListener( 'blur', function() { console.log('window blur') } );

                    p.mouseMoved();
				}

                p.draw = () => 
				{
                    _frameCount++;

                    _offscreenGraphics.strokeWeight(5);

					_offscreenGraphics.background(135, 206, 235, 5);

					_offscreenGraphics.circle(_randomGenerator.Int(0, _offscreenGraphics.width), _randomGenerator.Int(0, _offscreenGraphics.height), _randomGenerator.Int(20, 200));

                    _vibrantColorsShader.setUniform('tDiffuse', _offscreenGraphics);

                    _offscreenGraphics.shader(_vibrantColorsShader);

                    _offscreenGraphics.rect(0, 0, _offscreenGraphics.width, _offscreenGraphics.height);

                    p.image(_offscreenGraphics, 0, 0);
				}

                p.keyPressed = (event) => 
                {
                    console.log("keyPressed: " + event);
                    
                    var keyCode = event.which;

                    switch(keyCode)
                    {
                        case 119: // F8
                            event.preventDefault();
                            settings.squareCanvas = !settings.squareCanvas;
                            p.resize();
                            break;
                        case 120: // F9
                            event.preventDefault();
                            _toggleInfo();
                            break;
                        case 121: // F10
                            event.preventDefault();
                            _toggleGui();
                            break;
                        case 122: // F11
                            event.preventDefault();
                            _toggleFullscreen(document.body);
                            break;
                        default: 
                            console.log("key down: " + keyCode + ' keyCode');
                            break;
                    }

                }

                p.keyReleased = (event) => 
                {
                }

                p.mouseWheel = (event) => 
                {
                    console.log("mouseWheel: " + event);
                }

                p.mouseReleased = (event) => 
                {
                }

                p.mousePressed = (event) => 
                {
                    console.log("mousePressed: " + event);
                }

                p.mouseMoved = (event) => 
                {
                    if (_mouseTimer) 
                    {
                        window.clearTimeout(_mouseTimer);
                    }

                    document.body.style.cursor = "default";
                    $('#info-container').show(0);

                    _mouseTimer = window.setTimeout(_hideCursor, 4000);
                }

                p.resize = () =>
                {
                    if(settings.squareCanvas)
                    {
                        _canvasHeight = _canvasWidth = window.innerWidth < window.innerHeight ? Math.max(window.innerWidth, _minCanvasWidth) : Math.max(window.innerHeight, _minCanvasHeight);
                    }
                    else
                    {
                        _canvasWidth = Math.max(window.innerWidth, _minCanvasWidth);
                        _canvasHeight = Math.max(window.innerHeight, _minCanvasHeight);
                    }

                    // _camera.aspect = _canvasWidth / _canvasHeight;

                    // if(_camera instanceof THREE.OrthographicCamera)
                    // {
                    //     _camera.left = -1 * _camera.aspect;
                    //     _camera.right = 1 * _camera.aspect;
                    // }

                    // _camera.updateProjectionMatrix();

                    // _renderer.setSize( _canvasWidth, _canvasHeight );
                    // _composer.setSize( _canvasWidth, _canvasHeight );

                    // SCRBLR.Utility.UpdateResolutionUniforms(new THREE.Vector2(_canvasWidth, _canvasHeight), _composer.passes);

					p.resizeCanvas(_canvasWidth, _canvasHeight);
                    _offscreenGraphics.resizeCanvas(_canvasWidth, _canvasHeight);

                    console.log("canvas size: " + _canvasWidth + "x" + _canvasHeight);             
                }

				p.windowResized = () => 
				{
                    p.resize();
				}
			}

			new p5(Sketch, document.getElementById('canvas-container'));

			function _downloadWebGLRenderer(hiresScale)
			{
                hiresScale = (hiresScale === undefined || hiresScale === null || hiresScale == 0 ? 1 : hiresScale);

                const width = Math.round(1024 * hiresScale);
                const height = Math.round(1024 * hiresScale);

				const maxW = 4096 > _renderer.capabilities.maxTextureSize ? 4096 : _renderer.capabilities.maxTextureSize;
				const maxH = 4096 > _renderer.capabilities.maxTextureSize ? 4096 : _renderer.capabilities.maxTextureSize;

				const d = new Date();
				const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

				for (let y = 0; y < height; y += maxH)
				{
					for (let x = 0; x < width; x += maxW)
					{
						let w = Math.min(width - x, maxW);
						let h = Math.min(height - y, maxH);

						_renderer.setSize( w, h );
                        _composer.setSize( w, h );

						_camera.setViewOffset(width, height, x, y, w, h);

                        Render();
					
                        _downloadCanvasAsPng(_renderer.domElement, prefix + '-' + x + '-' + y + '.png');
					}
				}

                _renderer.setSize( _canvasWidth, _canvasHeight );
                _composer.setSize( _canvasWidth, _canvasHeight );

                _camera.clearViewOffset();
			}

			// function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			// {
			// 	let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

			// 	webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

			// 	var canvas = document.createElement('canvas');

			// 	canvas.width = webGLRenderTarget.width;
			// 	canvas.height = webGLRenderTarget.height;

			// 	var context = canvas.getContext('2d');

			// 	context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

			// 	_downloadCanvasAsPng(canvas);
			// }

			function _downloadCanvasAsPng(canvas, name)
			{
				if(name === null || name === undefined || name === "")
				{
					var d = new Date();

					name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
				}

				canvas.toBlob(function (blob) 
                {
                    // console.log(URL.createObjectURL(blob));

                    // PNGImage.readImage(URL.createObjectURL(blob), function (err, image) {
                    //     if (err) console.log(err);

                    //     // The image is in the 'image' variable if everything went well
                    // });                    

                    // blob.arrayBuffer().then((arrayBuffer) => 
                    // {
                    //     new PNG({ filterType: 4 }).parse(arrayBuffer, function (error, data) 
                    //     {
                    //         console.log(error, data);
                    //     });
                    // });

					var a = document.createElement('a');
					var url = URL.createObjectURL(blob);
					a.href = url;
					a.download = name;
					a.click();
				}, 'image/png', 1.0); 
			}

            $('.clickable').on('click', function(e) 
            {    
                let target = $(this).attr('target');

                switch(target)
                {
                    case 'F9':
                        _toggleInfo();
                        break;
                    case 'F10':
                        _toggleGui();
                        break;
                    case 'F11':
                        _toggleFullscreen();
                        break;
                }
            });

            function _toggleInfo()
            {
                $('#info-help-container').toggle(0);
                $('#info-text-container').toggle(0);
            }

            function _toggleGui()
            {
                $('#gui-container').toggle(0);
            }

            function _toggleFullscreen(element)
            {
                // https://stackoverflow.com/a/47110257/527843

                if(element === undefined || element === null)
                {
                    element = document.body;                    
                }

                if ((document.fullScreenElement !== undefined && document.fullScreenElement === null) || (document.msFullscreenElement !== undefined && document.msFullscreenElement === null) || (document.mozFullScreen !== undefined && !document.mozFullScreen) || (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) 
                {
                    if (element.requestFullScreen) 
                    {
                        element.requestFullScreen();
                    } 
                    else if (element.mozRequestFullScreen) 
                    {
                        element.mozRequestFullScreen();
                    }
                    else if (element.webkitRequestFullScreen) 
                    {
                        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
                    }
                    else if (element.msRequestFullscreen) 
                    {
                        element.msRequestFullscreen();
                    }
                } 
                else 
                {
                    if (document.cancelFullScreen) 
                    {
                        document.cancelFullScreen();
                    } 
                    else if (document.mozCancelFullScreen) 
                    {
                        document.mozCancelFullScreen();
                    } 
                    else if (document.webkitCancelFullScreen) 
                    {
                        document.webkitCancelFullScreen();
                    } 
                    else if (document.msExitFullscreen) 
                    {
                        document.msExitFullscreen();
                    }
                }            
            }

            function _hideCursor() 
            {
                _mouseTimer = null;
                document.body.style.cursor = "none";
                $('#info-container').hide(0);
            }

        </script>
    </body>
</html>        