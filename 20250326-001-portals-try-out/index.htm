<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
  <link type="text/css" rel="stylesheet" href="main.css" />
  <style>
    #blocker {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    #instructions {
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      font-size: 14px;
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div id="blocker">
    <div id="instructions">
      <p style="font-size:36px">Click to play</p>
      <p>
        Move: WASD<br />
        Jump: SPACE<br />
        Look: MOUSE
      </p>
      <p>[TAB toggles overview]</p>
    </div>
  </div>
  <script type="importmap">
      {
          "imports": {
              "three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
              "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/"
          }
      }
    </script>
  <script type="module">

    import * as THREE from 'three';
    import { RandomGenerator } from '/js/RandomGenerator.js';
    import { PointerLockControls } from 'three/addons/controls/PointerLockControls.js';
    import { FirstPersonControls } from 'three/addons/controls/FirstPersonControls.js';
    import { Portal } from './.js/Portal.js';
    import { PortalFrustum } from './.js/PortalFrustum.js';
    import { PortalFrustumHelper } from './.js/PortalFrustumHelper.js';
    import { CameraFrustum } from './.js/CameraFrustum.js';
    import { CameraFrustumHelper } from './.js/CameraFrustumHelper.js';
    import { PolygonHelper } from './.js/PolygonHelper.js';

    let camera, scene, renderer, controls, cameraFrustum, cameraFrustumHelper;
    let overviewCamera, overviewControls;
    let portal;
    let showOverview = false;
    let allowOverviewMovement = false;

    // Variables for main camera movement (PointerLock)
    const move = { forward: false, backward: false, left: false, right: false, up: false, down: false };
    const velocity = new THREE.Vector3();
    const direction = new THREE.Vector3();
    const speed = 100;
    let prevTime = performance.now();
    let visible = null;
    const frustumFar = 100;
    const frustumNear = null;
    const cameraFar = 100;
    const cameraNear = 1;
    let portalFrustumHelper, portalFrustum;
    const _sceneRandomGeneratorSeed = null;
    const _sceneRandomGenerator = new RandomGenerator(_sceneRandomGeneratorSeed);

    init();
    animate();

    function init()
    {
      const instructions = document.getElementById("instructions");
      const blocker = document.getElementById("blocker");

      // Create scene and main camera
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x808080);

      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, cameraNear, cameraFar);
      camera.position.set(0, 10, 50);
      scene.add(camera);

      // Create overview camera positioned high above, looking down.
      overviewCamera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
      overviewCamera.position.set(0, 200, 0);
      // Adjust up vector so that when looking down, the "forward" direction is intuitive.
      overviewCamera.up.set(0, 0, -1);
      overviewCamera.lookAt(new THREE.Vector3(0, 0, 0));
      scene.add(overviewCamera);

      // Renderer
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      fillScene(scene, 16);

      // Create the portal: a quad along the xy-plane
      portal = new Portal({ width: 5, height: 10, position : new THREE.Vector3(0, 5, 0), color: 0xff0000, opacity: 0.5 });
      portal.position.set(0, 5, 0);
      portal.normal = _sceneRandomGenerator.UnitVector(true, false, true);
      scene.add(portal);

      cameraFrustum = new CameraFrustum(camera);

      cameraFrustumHelper = new CameraFrustumHelper(cameraFrustum);
      scene.add(cameraFrustumHelper);
      cameraFrustumHelper.visible = false;

      portalFrustum = new PortalFrustum({ camera, portal, near: frustumNear, far: frustumFar });
      // portalFrustumFunction = createPortalFrustum({ camera, portal, near : frustumNear, far : frustumFar });
      portalFrustumHelper = new PortalFrustumHelper(portalFrustum);
      scene.add(portalFrustumHelper);

      // Ambient light
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);

      // Set up PointerLockControls for the main camera.
      controls = new PointerLockControls(camera, document.body);
      instructions.addEventListener("click", () =>
      {
        controls.lock();
        // When clicking to play, disable overview mode.
        // showOverview = false;
      });
      controls.addEventListener("lock", () =>
      {
        instructions.style.display = 'none';
        blocker.style.display = 'none';
        // showOverview = false;
      });
      controls.addEventListener("unlock", () =>
      {
        blocker.style.display = 'block';
        instructions.style.display = '';
      });

      // Set up FirstPersonControls for the overview camera.
      overviewControls = new FirstPersonControls(overviewCamera, renderer.domElement);
      overviewControls.lookSpeed = 0;
      overviewControls.movementSpeed = 50;

      // Keyboard event listeners for main camera movement.
      document.addEventListener("keydown", onKeyDown, false);
      document.addEventListener("keyup", onKeyUp, false);

      document.addEventListener("keydown", onToggleOverview, false);
      window.addEventListener("resize", onWindowResize, false);
    }

    function onWindowResize()
    {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      overviewCamera.aspect = window.innerWidth / window.innerHeight;
      overviewCamera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function onKeyDown(event) 
    {
      switch (event.code)
      {
        case "KeyW": case "ArrowUp": move.forward = true; break;
        case "KeyS": case "ArrowDown": move.backward = true; break;
        case "KeyA": case "ArrowLeft": move.left = true; break;
        case "KeyD": case "ArrowRight": move.right = true; break;
        case "PageUp": case "KeyR": move.up = true; break;
        case "PageDown": case "KeyF": move.down = true; break;
      }
    }

    function onKeyUp(event) 
    {
      switch (event.code)
      {
        case "KeyW": case "ArrowUp": move.forward = false; break;
        case "KeyS": case "ArrowDown": move.backward = false; break;
        case "KeyA": case "ArrowLeft": move.left = false; break;
        case "KeyD": case "ArrowRight": move.right = false; break;
        case "PageUp": case "KeyR": move.up = false; break;
        case "PageDown": case "KeyF": move.down = false; break;
      }
    }

    function onToggleOverview(event)
    {
      if (event.code === "Tab")
      {
        event.preventDefault();
        if (!showOverview)
        {
          // First press: Enable overview
          showOverview = true;
          allowOverviewMovement = false;
          console.log("Overview enabled");
        } else if (!allowOverviewMovement)
        {
          // Second press: Enable movement for overview camera
          allowOverviewMovement = true;
          console.log("Overview camera movement enabled");
        } else
        {
          // Third press: Disable overview
          showOverview = false;
          allowOverviewMovement = false;
          console.log("Overview disabled");
        }
      }
    }

    // --- Helpers for portal visibility test (AABB in NDC) ---
    function getQuadWorldVertices(mesh)
    {
      const vertices = [];
      const posAttr = mesh.geometry.attributes.position;
      for (let i = 0; i < posAttr.count; i++)
      {
        const v = new THREE.Vector3().fromBufferAttribute(posAttr, i);
        mesh.localToWorld(v);
        if (!vertices.some(u => u.distanceToSquared(v) < 1e-6))
        {
          vertices.push(v);
        }
      }
      return vertices;
    }

    function worldToNDC(vertex, vpMatrix)
    {
      const v4 = new THREE.Vector4(vertex.x, vertex.y, vertex.z, 1);
      v4.applyMatrix4(vpMatrix);
      return new THREE.Vector3(v4.x / v4.w, v4.y / v4.w, v4.z / v4.w);
    }

    function isRectangularQuadIntersectingFrustum(mesh, camera)
    {
      const vpMatrix = new THREE.Matrix4();
      vpMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
      const worldVerts = getQuadWorldVertices(mesh);
      if (worldVerts.length === 0) return false;
      const ndcVerts = worldVerts.map(v => worldToNDC(v, vpMatrix));

      let minX = Infinity, maxX = -Infinity;
      let minY = Infinity, maxY = -Infinity;
      let minZ = Infinity, maxZ = -Infinity;

      for (const v of ndcVerts)
      {
        if (v.x < minX) minX = v.x;
        if (v.x > maxX) maxX = v.x;
        if (v.y < minY) minY = v.y;
        if (v.y > maxY) maxY = v.y;
        if (v.z < minZ) minZ = v.z;
        if (v.z > maxZ) maxZ = v.z;
      }

      if (maxX < -1 || minX > 1) return false;
      if (maxY < -1 || minY > 1) return false;
      if (maxZ < -1 || minZ > 1) return false;
      return true;
    }
    // --- End Helpers ---

    function animate()
    {
      requestAnimationFrame(animate);

      portal.update();

      // const obliqueMatrix = createObliqueProjectionMatrix(camera, portal.plane);
      // camera.projectionMatrix.copy(obliqueMatrix);      

      const time = performance.now();
      const delta = (time - prevTime) / 1000;
      prevTime = time;

      velocity.x -= velocity.x * 10.0 * delta;
      velocity.y -= velocity.y * 10.0 * delta;
      velocity.z -= velocity.z * 10.0 * delta;

      direction.z = Number(move.forward) - Number(move.backward);
      direction.x = Number(move.right) - Number(move.left);
      direction.y = Number(move.up) - Number(move.down);
      direction.normalize();

      if (move.forward || move.backward) velocity.z -= direction.z * speed * delta;
      if (move.left || move.right) velocity.x -= direction.x * speed * delta;
      if (move.up || move.down) velocity.y -= direction.y * speed * delta;

      if (!showOverview) 
      {
        controls.moveRight(-velocity.x * delta);
        controls.moveForward(-velocity.z * delta);
        camera.position.y += velocity.y * delta;
      }
      else if (allowOverviewMovement)
      {
        overviewCamera.position.x -= velocity.x * delta;
        overviewCamera.position.z -= velocity.z * delta;
        overviewCamera.position.y += velocity.y * delta;
      }

      // Update controls:
      if (showOverview)
      {
        cameraFrustumHelper.update();
      }

      // Change portal color based on its visibility (using main camera)
      if (isRectangularQuadIntersectingFrustum(portal.mesh, camera))
      {
        portal.material.color.set(0xff0000);
        if (visible !== true)
        {
          visible = true;
          console.log('visible');
        }
      }
      else
      {
        portal.material.color.set(0xffff00);
        if (visible !== false)
        {
          visible = false;
          console.log('not visible');
        }
      }

      portalFrustum.update();
      portalFrustumHelper.update();

      // Render main view (full screen)
      renderer.setViewport(0, 0, window.innerWidth, window.innerHeight);
      renderer.setScissorTest(false);
      renderer.render(scene, camera);

      // If overview is enabled, render it in the lower left corner.
      if (showOverview)
      {
        const viewWidth = window.innerWidth / 2;
        const viewHeight = window.innerHeight / 2;

        cameraFrustumHelper.visible = true;

        // Lower left corner: (0, 0)
        renderer.setViewport(20, 20, viewWidth, viewHeight);
        renderer.setScissor(20, 20, viewWidth, viewHeight);
        renderer.setScissorTest(true);
        renderer.render(scene, overviewCamera);
        renderer.setScissorTest(false);

        cameraFrustumHelper.visible = false;
      }
    }

    function fillScene(scene, count) 
    {
      const colorParameters = { minSaturation: 1, minLightness: 0.5, maxLightness: 0.89 };

      // Helper function to generate bright colors
      function getRandomBrightColor()
      {
        return _sceneRandomGenerator.Color(colorParameters);
      }

      // Create and add ground plane
      const planeGeometry = new THREE.PlaneGeometry(50, 50);
      const planeMaterial = new THREE.MeshStandardMaterial({ color: getRandomBrightColor(), side: THREE.DoubleSide });
      const plane = new THREE.Mesh(planeGeometry, planeMaterial);
      plane.rotation.x = -Math.PI / 2; // Make it horizontal
      scene.add(plane);

      // Create and add cubes
      for (let i = 0; i < count; i++) 
      {
        const cubeGeometry = new THREE.BoxGeometry(2.5, 2.5, 2.5);
        const cubeMaterial = new THREE.MeshStandardMaterial({ color: getRandomBrightColor() });
        const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);

        // Random position within the 50x50 plane
        cube.position.set(
          _sceneRandomGenerator.Single(-24, 24), // X position
          1.25, // Y position (so it sits on the plane)
          _sceneRandomGenerator.Single(-24, 24)  // Z position
        );

        // Random rotation
        cube.rotation.set(
          0, // No need to rotate on X
          _sceneRandomGenerator.Single(0, Math.PI * 2), // Y rotation
          0  // No need to rotate on Z
        );

        scene.add(cube);
      }
    }

    function createObliqueProjectionMatrix(camera, portalPlane)
    {
      // Get the camera's projection matrix
      const projectionMatrix = camera.projectionMatrix.clone();

      // Convert portal plane from world space to camera space
      const inverseViewMatrix = new THREE.Matrix4().copy(camera.matrixWorld).invert();
      const clipPlane = portalPlane.clone().applyMatrix4(inverseViewMatrix);

      // Normalize the plane equation: ax + by + cz + d = 0
      const clipNormal = new THREE.Vector3(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z);
      const clipD = clipPlane.constant;

      // Extract elements from the projection matrix
      const projMatrix = projectionMatrix.elements;
      const q = new THREE.Vector4(
        (Math.sign(clipNormal.x) + projMatrix[8]) / projMatrix[0],
        (Math.sign(clipNormal.y) + projMatrix[9]) / projMatrix[5],
        -1.0,
        (1.0 + projMatrix[10]) / projMatrix[14]
      );

      // Calculate the new row for the projection matrix
      const c = clipNormal.clone().multiplyScalar(2.0 / clipNormal.dot(q));
      projMatrix[2] = c.x;
      projMatrix[6] = c.y;
      projMatrix[10] = c.z + 1.0;
      projMatrix[14] = c.z * clipD;

      return new THREE.Matrix4().fromArray(projMatrix);
    }

  </script>
</body>

</html>