<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">		
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>

		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "/scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js"
				}
			}
		</script>

		<script type="module">

			import $ from 'https://cdn.jsdelivr.net/npm/jquery@3.7.1/+esm'
			import * as THREE from 'three';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
			import Stats from 'three/addons/libs/stats.module.js';
			import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
			import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
			import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
			import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
            import { ClearPass } from 'three/addons/postprocessing/ClearPass.js';
            import { MaskPass, ClearMaskPass } from 'three/addons/postprocessing/MaskPass.js';
            import { CopyShader } from 'three/addons/shaders/CopyShader.js';
			import * as Shaders from './.shaders/Export.module.js';
			import * as Postprocessing from './.postprocessing/Export.module.js';
			// import resolveLygia from "https://lygia.xyz/resolve.esm.js";

			let _screenCapturePrefix = "00000000-005-custom-postprocessing-003";
			let _camera, _controls, _postprocessingScene, _shaderGeometryScene, _renderer;
			let _effectsComposer;
			let _minCanvasWidth = 640, _minCanvasHeight = 640;
			let _canvasWidth = 800, _canvasHeight = 800;
			let _sceneWidth = 1, _sceneHeight = 1;
			let _near = 1, _far = 1000, _fov = 60;
			let _gui, _guiActions;
			let _clock, _deltaTime;
			let _meshes = [];
			let _shaderSettingsObject;			
			let _mouseTimer = null;
			let _squareCanvas = false;

			// --------------------

			// ASync resolver, all includes in parallel calls
			// let vertSource = resolveLygia('#include lygia/generative/fbm.glsl');
    		// let fragSource = resolveLygia('#include lygia/generative/fbm.glsl');

			// --------------------

			init();

			function init() 
			{
				_renderer = new THREE.WebGLRenderer( { antialias: true, stencil: true, alpha: true } );
				_renderer.setPixelRatio( window.devicePixelRatio );
				_renderer.setSize( _canvasWidth, _canvasHeight );
				_renderer.setAnimationLoop( update );
				_renderer.setClearColor(0xFFFFFF, 0);
				_renderer.shadowMap.enabled = true;
    			_renderer.shadowMap.type = THREE.PCFSoftShadowMap;

				document.body.appendChild( _renderer.domElement );

				_shaderSettingsObject = 
				{
					Gradient2ShaderObject: 
					{
						pass: null,
						folder: null,
						init: function()
						{
							this.pass = new ShaderPass(Shaders.GradientShader2);
							this.pass.enabled = true;
							this.folder = Shaders.GradientShader2.addGuiFolder(_gui, this.pass);
						},
					},

					GradientShaderObject: 
					{
						pass: null,
						folder: null,
						init: function()
						{
							this.pass = new ShaderPass(Shaders.GradientShader);
							this.pass.enabled = false;
							this.folder = Shaders.GradientShader.addGuiFolder(_gui, this.pass);
						},
					},

					ColorAdjustShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						// update: function()
						// {
						// 	this.pass.uniforms.time.value = this.settings.time += this.settings.timeSpeed;
						// },
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.ColorAdjustShader);

							this.settings = {
								hue: 0.0,
								saturation: 0.0,
								brightness: 0.0,
								contrast: 0.0,
								coverPercentage: 1.0,
							};

							function updateUniforms()
							{
								self.pass.uniforms.hue.value = self.settings.hue;
								self.pass.uniforms.saturation.value = self.settings.saturation;
								self.pass.uniforms.brightness.value = self.settings.brightness;
								self.pass.uniforms.contrast.value = self.settings.contrast;
								self.pass.uniforms.coverPercentage.value = self.settings.coverPercentage;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('ColorAdjustShader');

							this.folder.add(this.settings, 'hue', -1.0, 1.0, 0.02).name('Hue').onChange(updateUniforms);
							this.folder.add(this.settings, 'saturation', -1.0, 1.0, 0.02).name('Saturation').onChange(updateUniforms);
							this.folder.add(this.settings, 'brightness', -1.0, 1.0, 0.02).name('Brightness').onChange(updateUniforms);
							this.folder.add(this.settings, 'contrast', -1.0, 1.0, 0.02).name('Contrast').onChange(updateUniforms);
							this.folder.add(this.settings, 'coverPercentage', 0.0, 1.0, 0.01).name('Cover Percentage').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					OvercastSkyShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						update: function()
						{
							this.pass.uniforms.time.value = this.settings.time += this.settings.timeSpeed;
						},
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.OvercastSkyShader);

							this.settings = {
								bias: 0.0,
								noiseFuncionType: 0,
								blackAndWhite: false,
								multiplier: 1,
								time: 0.0,
								timeSpeed: 0.01,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.bias.value = self.settings.bias;
								self.pass.uniforms.noiseFuncionType.value = self.settings.noiseFuncionType;
								self.pass.uniforms.blackAndWhite.value = self.settings.blackAndWhite;
								self.pass.uniforms.multiplier.value = new THREE.Vector3(self.settings.multiplier, self.settings.multiplier, self.settings.multiplier);
								self.pass.uniforms.time.value = self.settings.time;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('OvercastSkyShader');

							this.folder.add(this.settings, 'bias', 0, 1, 0.025).name('Bias').onChange(updateUniforms);
							this.folder.add(this.settings, 'noiseFuncionType', { 'Classic': 0, 'Ken Perlin': 1, 'Simplex': 2, 'Gradient': 3, 'Fbm': 4, 'Voronoi': 4 }).name('Noise Implementation').onChange(updateUniforms);
							this.folder.add(this.settings, 'blackAndWhite').name('B & W').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplier', 0, 4.0, 0.05).name('Noise Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'timeSpeed', 0, 1.0, 0.01).name('Time Speed');
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					VisualizeNoiseShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.VisualizeNoiseShader);

							this.settings = {
								bias: 0.0,
								noiseFuncionType: 0,
								blackAndWhite: false,
								multiplierX: 0.01,
								multiplierY: 0.01,
								octaves: 4,
								amplitude: 1.0,
								frequency: 1.00,
								lacunarity: 2.00,
								persistence: 0.50,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.bias.value = self.settings.bias;
								self.pass.uniforms.noiseFuncionType.value = self.settings.noiseFuncionType;
								self.pass.uniforms.blackAndWhite.value = self.settings.blackAndWhite;
								self.pass.uniforms.multiplier.value = new THREE.Vector3(self.settings.multiplierX, self.settings.multiplierY, 1.0);
								self.pass.uniforms.octaves.value = self.settings.octaves;
								self.pass.uniforms.amplitude.value = self.settings.amplitude;
								self.pass.uniforms.frequency.value = self.settings.frequency;
								self.pass.uniforms.lacunarity.value = self.settings.lacunarity;
								self.pass.uniforms.persistence.value = self.settings.persistence;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('VisualizeNoiseShader');

							this.folder.add(this.settings, 'bias', 0, 1, 0.025).name('Bias').onChange(updateUniforms);
							this.folder.add(this.settings, 'noiseFuncionType', { 'Classic': 0, 'Ken Perlin': 1, 'Simplex': 2, 'Gradient': 3, 'Fbm': 4, 'Summed Simplex': 5 }).name('Noise Implementation').onChange(updateUniforms);
							this.folder.add(this.settings, 'blackAndWhite').name('B & W').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplierX', 0, 0.1, 0.0001).name('Noise X Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplierY', 0, 0.1, 0.0001).name('Noise Y Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'octaves', 1, 12, 1).name('Noise Octaves').onChange(updateUniforms);
							this.folder.add(this.settings, 'amplitude', 0.00, 2.00, 0.01).name('Noise Amplitude').onChange(updateUniforms);
							this.folder.add(this.settings, 'frequency', 0.25, 2.00, 0.05).name('Noise Frequency').onChange(updateUniforms);
							this.folder.add(this.settings, 'lacunarity', 0.20, 4.00, 0.1).name('Noise Lacunarity').onChange(updateUniforms);
							this.folder.add(this.settings, 'persistence', 0.20, 4.00, 0.1).name('Noise Persistence').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					VisualizeRandomShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.VisualizeRandomShader);

							this.settings = {
								bias: 0.0,
								randomFuncionType: 0,
								blackAndWhite: false,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.bias.value = self.settings.bias;
								self.pass.uniforms.randomFuncionType.value = self.settings.randomFuncionType;
								self.pass.uniforms.blackAndWhite.value = self.settings.blackAndWhite;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('VisualizeRandomShader');

							this.folder.add(this.settings, 'bias', 0, 1, 0.025).name('Bias').onChange(updateUniforms);
							this.folder.add(this.settings, 'randomFuncionType', { 'Lygia': 0, '1-liner': 1, 'Golden Ratio': 2, 'Improved 1-liner': 3, 'Int Hash': 4 }).name('Random Implementation').onChange(updateUniforms);
							this.folder.add(this.settings, 'blackAndWhite').name('B & W').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					NoisePixelDisplacePassContainer2: 
					{
						pass: null,
						folder: null,
						init: function()
						{
							this.pass = new ShaderPass(Shaders.NoisePixelDisplaceShader);
							this.pass.enabled = false;
							this.folder = Shaders.NoisePixelDisplaceShader.addGuiFolder(_gui, this.pass);
						},
					},

					RandomPixelDisplacePassContainer: 
					{
						pass: null,
						folder: null,
						init: function()
						{
							this.pass = new ShaderPass(Shaders.RandomPixelDisplaceShader);
							this.pass.enabled = false;
							this.folder = Shaders.RandomPixelDisplaceShader.addGuiFolder(_gui, this.pass);
						},
					},

					UvVisualizerPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.UvVisualizerPass();

							this.settings = {
								visualizeXaxis: true,
								visualizeType: 0,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.visualizeXaxis.value = self.settings.visualizeXaxis;
								self.pass.uniforms.visualizeType.value = self.settings.visualizeType;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('UvVisualizerPass');

							this.folder.add(this.settings, 'visualizeXaxis').name('Visualize X-axis').onChange(updateUniforms);
							this.folder.add(this.settings, 'visualizeType', 
								{ 
									"Uv's": 0, 
									"gl_FragCoord.xy / resolution.xy": 1,
							 	})
								.name('Visualize Types').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					MondriaanLinesPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.MondriaanLinesPass();

							this.settings = {
								minOffset: -0.1,
								maxOffset: 0.1,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.minOffset.value = self.settings.minOffset;
								self.pass.uniforms.maxOffset.value = self.settings.maxOffset;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('MondriaanLinesPass');

							this.folder.add(this.settings, 'minOffset', -0.25, 0, 0.001).name('Min Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'maxOffset',  0, 0.25, 0.001).name('Max Offset').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					RandomPixelStretchPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.RandomPixelStretchPass();

							this.settings = {
								minOffset: -0.1,
								maxOffset: 0.1,
							};

							function updateUniforms()
							{
								self.pass.uniforms.minOffset.value = self.settings.minOffset;
								self.pass.uniforms.maxOffset.value = self.settings.maxOffset;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('RandomPixelStretchPass');

							this.folder.add(this.settings, 'minOffset', -0.25, 0, 0.001).name('Min Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'maxOffset',  0, 0.25, 0.001).name('Max Offset').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					}
				};


                _canvasWidth = Math.min(window.innerWidth, document.documentElement.clientWidth);
                _canvasHeight = Math.min(window.innerHeight, document.documentElement.clientHeight);

                const aspect = _canvasWidth / _canvasHeight;

                // _camera = new THREE.OrthographicCamera( -1 * aspect, 1 * aspect, 1, -1, _near, _far);
				_camera = new THREE.PerspectiveCamera( _fov, aspect, _near, _far);
				_camera.position.set(0, 2.5, 7.5 );
				_camera.lookAt(0, 0, 0 );

				_postprocessingScene = new THREE.Scene();

				_shaderGeometryScene = new THREE.Scene();
				// _shaderScene.background = new THREE.Color( 0xffffff );

				const loader = new THREE.CubeTextureLoader();
				const texture = loader.load([
					'/media/textures/cube/park2/posx.jpg',
					'/media/textures/cube/park2/negx.jpg',
					'/media/textures/cube/park2/posy.jpg',
					'/media/textures/cube/park2/negy.jpg',
					'/media/textures/cube/park2/posz.jpg',
					'/media/textures/cube/park2/negz.jpg',
				]);
				_postprocessingScene.background = texture;				

				const lights = [];

				for(var i = 0; i < 2; i++)
				{
					lights[ i ] = new THREE.DirectionalLight( 0xffffff, 3 );

					lights[ i ].castShadow = true;
					lights[ i ].shadow.bias = -0.001;
					lights[ i ].shadow.mapSize.width = 2048;
					lights[ i ].shadow.mapSize.height = 2048;
					lights[ i ].shadow.camera.near = 0.1;
					lights[ i ].shadow.camera.far = 500.0;
					lights[ i ].shadow.camera.near = 0.5;
					lights[ i ].shadow.camera.far = 500.0;
					lights[ i ].shadow.camera.left = 100;
					lights[ i ].shadow.camera.right = -100;
					lights[ i ].shadow.camera.top = 100;
					lights[ i ].shadow.camera.bottom = -100;

					_shaderGeometryScene.add( lights[ i ] );
				}

				lights[ 0 ].position.set( 0, 200, 0 );
				lights[ 1 ].position.set( 100, 200, 100 );


				const controls = new OrbitControls(_camera, _renderer.domElement);
    			controls.update();



			
				

				let geometryMaterial = new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );
				geometryMaterial = new THREE.ShaderMaterial( { uniforms: Shaders.GradientShader.uniforms, vertexShader: Shaders.GradientShader.vertexShader, fragmentShader: Shaders.GradientShader.fragmentShader });

				const plane = new THREE.Mesh(
					new THREE.PlaneGeometry(8, 8, 8, 8),
					new THREE.MeshStandardMaterial({
						color: 0xFFFF00,
					}));
				plane.castShadow = false;
				plane.receiveShadow = true;
				plane.position.y = -1;
				plane.rotation.x = -Math.PI / 2;
				_shaderGeometryScene.add(plane);				
			
				// -----------------------
	
				let mesh = new THREE.Mesh( 
					new THREE.SphereGeometry( 1, 16, 8 ), 
					geometryMaterial);
				mesh.castShadow = true;
				mesh.position.x = 0;
				mesh.position.y = 0.5;
				mesh.position.z = 0;
				// mesh.receiveShadow = true;
				_meshes.push(mesh);
				_shaderGeometryScene.add(mesh);

				mesh = new THREE.Mesh( 
					new THREE.TorusKnotGeometry(0.5, 0.20, 100, 20), 
					geometryMaterial);
				mesh.castShadow = true;
				mesh.position.x = -2;
				mesh.position.y = 0.5;
				mesh.position.z = 0;
				// mesh.receiveShadow = true;
				_meshes.push(mesh);
				_shaderGeometryScene.add(mesh);			

				mesh = new THREE.Mesh( 
					new THREE.TorusGeometry( 0.5, 0.25, 16, 100 ), 
					geometryMaterial);
				mesh.castShadow = true;
				mesh.position.x = 2;
				mesh.position.y = 0.5;
				mesh.position.z = 0;
				// mesh.receiveShadow = true;
				_meshes.push(mesh);
				_shaderGeometryScene.add(mesh);	
	
				// -----------------------

				_gui = new GUI();

				// -----------------------

				var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat, stencilBuffer: false };

				var renderTarget = new THREE.WebGLRenderTarget( _canvasWidth, _canvasHeight, parameters);

				_renderer.autoClear = false;
				_renderer.autoClearColor = false;
				_renderer.autoClearDepth = true;
				_renderer.autoClearStencil = false;
				_postprocessingScene.autoClear = false;
				_shaderGeometryScene.autoClear = false;

				_effectsComposer = new EffectComposer( _renderer );

				_effectsComposer.addPass( new ClearPass() );

				const postprocessingPass = new RenderPass( _postprocessingScene, _camera );
				postprocessingPass.clear = false;
				// postprocessingPass.clearDepth = false;
				postprocessingPass.needsSwap = false;
				_effectsComposer.addPass( postprocessingPass );

				let shaderEnabled = false;

				Object.keys(_shaderSettingsObject).forEach(function(key, index) 
				{
					if(_shaderSettingsObject[key].init !== undefined && _shaderSettingsObject[key].init !== null)
					{
						_shaderSettingsObject[key].init();
					}
					
					if(_shaderSettingsObject[key].folder !== undefined && _shaderSettingsObject[key].folder !== null)
					{
						_shaderSettingsObject[key].folder.close();
					}
					
					_effectsComposer.addPass(_shaderSettingsObject[key].pass);
				});				

				Object.keys(_shaderSettingsObject).forEach(function(key, index) 
				{
					if(!shaderEnabled && _shaderSettingsObject[key].enabled)
					{
						_shaderSettingsObject[key].folder.open();
						shaderEnabled = true;
					}
				});				

				if(!shaderEnabled)
				{
					Object.keys(_shaderSettingsObject).forEach(function(key, index) 
					{
						if(!shaderEnabled)
						{
							_shaderSettingsObject[key].enabled = true;
							_shaderSettingsObject[key].folder.open();
							shaderEnabled = true;							
						}
					});				
				}

				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[0].time = 0.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[0].color.x = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[0].color.y = 0.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[0].color.z = 0.0;

				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[1].time = 0.5;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[1].color.x = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[1].color.y = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[1].color.z = 1.0;

				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[2].time = 0.75;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[2].color.x = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[2].color.y = 0.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[2].color.z = 0.0;

				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[3].time = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[3].color.x = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[3].color.y = 1.0;
				_shaderSettingsObject.Gradient2ShaderObject.pass.uniforms.gradient.value[3].color.z = 1.0;


				const shaderGeometryPass = new RenderPass( _shaderGeometryScene, _camera );
				// shaderGeometryPass.clear = false;
				shaderGeometryPass.clearDepth = true;
				// shaderGeometryPass.needsSwap = false;

				// shaderGeometryPass.clearDepth = true;
				_effectsComposer.addPass( shaderGeometryPass );

				const outputPass = new OutputPass();				
				_effectsComposer.addPass( outputPass );				

				// -----------------------

                window.addEventListener("keydown", onKeyDown, false);
                window.addEventListener("keyup", onKeyUp, false);
                window.addEventListener("mousemove", onMouseMove, false);
                window.addEventListener("mousedown", onMouseDown, false);
                window.addEventListener("mouseup", onMouseUp, false);

                resize();

                window.addEventListener( 'resize', resize );
                window.addEventListener( 'focus', function() { console.log('window focus') } );
                window.addEventListener( 'blur', function() { console.log('window blur') } );

                onMouseMove();

				// -----------------------

				_clock = new THREE.Clock();

				// -----------------------
			}

            function onKeyDown(event) 
            {
                var keyCode = event.which;

                switch(keyCode)
                {
                    case 119: // F8
                        event.preventDefault();
						_squareCanvas = !_squareCanvas;
						resize();
                        break;
                    case 120: // F9
                        event.preventDefault();
                        _toggleInfo();
                        break;
                    case 121: // F10
                        event.preventDefault();
                        _toggleGui();
                        break;
                    case 122: // F11
                        event.preventDefault();
                        _toggleFullscreen(document.body);
                        break;
                    default: 
                        console.log("key down: " + keyCode + ' keyCode');
                        break;
                }
            };            

            function onKeyUp(event) 
            {
                // event.preventDefault();
            };            

            function onMouseDown(event) 
            {
                // event.preventDefault();

                switch(event.button)
                {
                    case 0:
                        break;
                }

                // console.log(event.button);
                // console.log(event.buttons);
            }; 

            function onMouseUp(event) 
            {
                // event.preventDefault();
            };  

            function onMouseMove(event) 
            {
                // event.preventDefault();

                if (_mouseTimer) 
                {
                    window.clearTimeout(_mouseTimer);
                }

                document.body.style.cursor = "default";
                $('#info-container').show(0);

                _mouseTimer = window.setTimeout(_hideCursor, 4000);

                // event.clientX    // The X coordinate of the mouse pointer in viewport coordinates.
                // event.clientY    // The Y coordinate of the mouse pointer in viewport coordinates.
                // event.altKey     // Returns true if the alt key was down when the mouse event was fired.
                // event.ctrlKey    // Returns true if the ctrl key was down when the mouse event was fired.
                // event.shiftKey   // Returns true if the shift key was down when the mouse event was fired.
                // event.button     // The button number that was pressed (if applicable) when the mouse event was fired.
                // event.buttons    // The buttons being pressed (if any) when the mouse event was fired.
                // event.movementX  // The X coordinate of the mouse pointer relative to the position of the last mousemove event.
                // event.movementY  // The Y coordinate of the mouse pointer relative to the position of the last mousemove event.
                // event.screenX    // The X coordinate of the mouse pointer in screen coordinates.
                // event.screenY    // The Y coordinate of the mouse pointer in screen coordinates.
            };            

			function resize() 
			{
				if(_squareCanvas)
				{
					_canvasHeight = _canvasWidth = window.innerWidth < window.innerHeight ? Math.max(window.innerWidth, _minCanvasWidth) : Math.max(window.innerHeight, _minCanvasHeight);
				}
				else
				{
					_canvasWidth = Math.max(window.innerWidth, _minCanvasWidth);
					_canvasHeight = Math.max(window.innerHeight, _minCanvasHeight);
				}

				_camera.aspect = _canvasWidth / _canvasHeight;

				if(_camera instanceof THREE.OrthographicCamera)
				{
					_camera.left = -1 * _camera.aspect;
					_camera.right = 1 * _camera.aspect;
				}

				_camera.updateProjectionMatrix();

				_renderer.setSize( _canvasWidth, _canvasHeight );
				_effectsComposer.setSize( _canvasWidth, _canvasHeight );
			}

			function update() 
			{
				const elapsed = _clock.getDelta();
				const time = _clock.elapsedTime;

				_meshes.forEach(m => {
					m.rotation.y += 0.01;
				});

			
				Object.keys(_shaderSettingsObject).forEach(function(key, index) 
				{
					if(_shaderSettingsObject[key].update !== undefined)
					{
						_shaderSettingsObject[key].update();
					}
				});		

				render();
			}

			function render() 
			{
				_effectsComposer.render();
			}

			function _downloadWebGLRenderer()
			{
				const maxHiresW = 3200;
				const maxHiresH = 3200;

				if(_canvasWidth > maxHiresW || _canvasHeight > maxHiresH)
				{
					_downloadWebGLRendererHires();

					return;
				}
				else
				{
					_renderer.render(_postprocessingScene, _camera);

					_downloadCanvasAsPng(_renderer.domElement);
				}

			}

			function _downloadWebGLRendererHires()
			{
				const maxW = 1600;
				const maxH = 1600;

				const d = new Date();
				const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

				for (let y = 0; y < _canvasHeight; y += maxH)
				{
					for (let x = 0; x < _canvasWidth; x += maxW)
					{
						let w = Math.min(_canvasWidth - x, maxW);
						let h = Math.min(_canvasHeight - y, maxH);

						// console.log(prefix + '-' + x + '-' + y + '.png');

						_renderer.setSize( w, h );

						_camera.setViewOffset(_canvasWidth, _canvasHeight, x, y, w, h);
						
						_renderer.render(_postprocessingScene, _camera);

						_downloadCanvasAsPng(_renderer.domElement, prefix + '-' + x + '-' + y + '.png');
					}
				}

				_renderer.setSize( _canvasWidth, _canvasHeight );

				_camera.clearViewOffset();
			}

			function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			{
				let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

				webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

				var canvas = document.createElement('canvas');

				canvas.width = webGLRenderTarget.width;
				canvas.height = webGLRenderTarget.height;

				var context = canvas.getContext('2d');

				context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

				_downloadCanvasAsPng(canvas);
			}

			function _downloadCanvasAsPng(canvas, name)
			{
				if(name === null || name === undefined || name === "")
				{
					var d = new Date();

					name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
				}

				canvas.toBlob(function (blob) {
					var a = document.createElement('a');
					var url = URL.createObjectURL(blob);
					a.href = url;
					a.download = name;
					a.click();
				}, 'image/png', 1.0); 
			}

            $('.clickable').on('click', function(e) 
            {    
                let target = $(this).attr('target');

                switch(target)
                {
                    case 'F9':
                        _toggleInfo();
                        break;
                    case 'F10':
                        _toggleGui();
                        break;
                    case 'F11':
                        _toggleFullscreen();
                        break;
                }
            });

            function _toggleInfo()
            {
                $('#info-container').toggle(0);
                $('#info-help-container').toggle(0);
                $('#info-text-container').toggle(0);
            }

            function _toggleGui()
            {
                $('#gui-container').toggle(0);
            }

            function _toggleFullscreen(element)
            {
                // https://stackoverflow.com/a/47110257/527843

                if(element === undefined || element === null)
                {
                    element = document.body;                    
                }

                if ((document.fullScreenElement !== undefined && document.fullScreenElement === null) || (document.msFullscreenElement !== undefined && document.msFullscreenElement === null) || (document.mozFullScreen !== undefined && !document.mozFullScreen) || (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) 
                {
                    if (element.requestFullScreen) 
                    {
                        element.requestFullScreen();
                    } 
                    else if (element.mozRequestFullScreen) 
                    {
                        element.mozRequestFullScreen();
                    }
                    else if (element.webkitRequestFullScreen) 
                    {
                        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
                    }
                    else if (element.msRequestFullscreen) 
                    {
                        element.msRequestFullscreen();
                    }
                } 
                else 
                {
                    if (document.cancelFullScreen) 
                    {
                        document.cancelFullScreen();
                    } 
                    else if (document.mozCancelFullScreen) 
                    {
                        document.mozCancelFullScreen();
                    } 
                    else if (document.webkitCancelFullScreen) 
                    {
                        document.webkitCancelFullScreen();
                    } 
                    else if (document.msExitFullscreen) 
                    {
                        document.msExitFullscreen();
                    }
                }            
            }

            function _hideCursor() 
            {
                _mouseTimer = null;
                document.body.style.cursor = "none";
                $('#info-container').hide(0);
            }

		</script>

	</body>
</html>