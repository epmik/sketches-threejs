<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">		
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>

		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "/scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js"
				}
			}
		</script>

		<script type="module">

			import * as THREE from 'three';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
			import Stats from 'three/addons/libs/stats.module.js';
			import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
			import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
			import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
			import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
			import * as Shaders from './.shaders/Export.module.js';
			import * as Postprocessing from './.postprocessing/Export.module.js';
			// import resolveLygia from "https://lygia.xyz/resolve.esm.js";

			let _screenCapturePrefix = "00000000-005-custom-postprocessing-003";
			let _camera, _controls, _scene, _renderer;
			let _effectsComposer;
			let _canvasWidth = 800, _canvasHeight = 800;
			let _sceneWidth = 1, _sceneHeight = 1;
			let _near = 1, _far = 1000, _fov = 60;
			let _gui, _guiActions;
			let _clock, _deltaTime;
			let _meshes = [];
			let _postprocessingPassesLiteral;			

			// --------------------

			// ASync resolver, all includes in parallel calls
			// let vertSource = resolveLygia('#include lygia/generative/fbm.glsl');
    		// let fragSource = resolveLygia('#include lygia/generative/fbm.glsl');

			// --------------------

			init();

			function init() 
			{
				_renderer = new THREE.WebGLRenderer( { antialias: true, stencil: true, alpha: true } );
				_renderer.setPixelRatio( window.devicePixelRatio );
				_renderer.setSize( _canvasWidth, _canvasHeight );
				_renderer.setAnimationLoop( update );
				_renderer.setClearColor(0xFFFFFF, 0);
				_renderer.shadowMap.enabled = true;
    			_renderer.shadowMap.type = THREE.PCFSoftShadowMap;

				document.body.appendChild( _renderer.domElement );

				_postprocessingPassesLiteral = 
				{
					ColorAdjustShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						// update: function()
						// {
						// 	this.pass.uniforms.time.value = this.settings.time += this.settings.timeSpeed;
						// },
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.ColorAdjustShader);

							this.settings = {
								hue: 0.0,
								saturation: 0.0,
								brightness: 0.0,
								contrast: 0.0,
								coverPercentage: 1.0,
							};

							function updateUniforms()
							{
								self.pass.uniforms.hue.value = self.settings.hue;
								self.pass.uniforms.saturation.value = self.settings.saturation;
								self.pass.uniforms.brightness.value = self.settings.brightness;
								self.pass.uniforms.contrast.value = self.settings.contrast;
								self.pass.uniforms.coverPercentage.value = self.settings.coverPercentage;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('ColorAdjustShader');

							this.folder.add(this.settings, 'hue', -1.0, 1.0, 0.02).name('Hue').onChange(updateUniforms);
							this.folder.add(this.settings, 'saturation', -1.0, 1.0, 0.02).name('Saturation').onChange(updateUniforms);
							this.folder.add(this.settings, 'brightness', -1.0, 1.0, 0.02).name('Brightness').onChange(updateUniforms);
							this.folder.add(this.settings, 'contrast', -1.0, 1.0, 0.02).name('Contrast').onChange(updateUniforms);
							this.folder.add(this.settings, 'coverPercentage', 0.0, 1.0, 0.01).name('Cover Percentage').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					OvercastSkyShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						update: function()
						{
							this.pass.uniforms.time.value = this.settings.time += this.settings.timeSpeed;
						},
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.OvercastSkyShader);

							this.settings = {
								bias: 0.0,
								noiseFuncionType: 0,
								blackAndWhite: false,
								multiplier: 1,
								time: 0.0,
								timeSpeed: 0.01,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.bias.value = self.settings.bias;
								self.pass.uniforms.noiseFuncionType.value = self.settings.noiseFuncionType;
								self.pass.uniforms.blackAndWhite.value = self.settings.blackAndWhite;
								self.pass.uniforms.multiplier.value = new THREE.Vector3(self.settings.multiplier, self.settings.multiplier, self.settings.multiplier);
								self.pass.uniforms.time.value = self.settings.time;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('OvercastSkyShader');

							this.folder.add(this.settings, 'bias', 0, 1, 0.025).name('Bias').onChange(updateUniforms);
							this.folder.add(this.settings, 'noiseFuncionType', { 'Classic': 0, 'Ken Perlin': 1, 'Simplex': 2, 'Gradient': 3, 'Fbm': 4, 'Voronoi': 4 }).name('Noise Implementation').onChange(updateUniforms);
							this.folder.add(this.settings, 'blackAndWhite').name('B & W').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplier', 0, 4.0, 0.05).name('Noise Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'timeSpeed', 0, 1.0, 0.01).name('Time Speed');
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					VisualizeNoiseShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.VisualizeNoiseShader);

							this.settings = {
								bias: 0.0,
								noiseFuncionType: 0,
								blackAndWhite: false,
								multiplierX: 0.01,
								multiplierY: 0.01,
								octaves: 4,
								amplitude: 1.0,
								frequency: 1.00,
								lacunarity: 2.00,
								persistence: 0.50,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.bias.value = self.settings.bias;
								self.pass.uniforms.noiseFuncionType.value = self.settings.noiseFuncionType;
								self.pass.uniforms.blackAndWhite.value = self.settings.blackAndWhite;
								self.pass.uniforms.multiplier.value = new THREE.Vector3(self.settings.multiplierX, self.settings.multiplierY, 1.0);
								self.pass.uniforms.octaves.value = self.settings.octaves;
								self.pass.uniforms.amplitude.value = self.settings.amplitude;
								self.pass.uniforms.frequency.value = self.settings.frequency;
								self.pass.uniforms.lacunarity.value = self.settings.lacunarity;
								self.pass.uniforms.persistence.value = self.settings.persistence;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('VisualizeNoiseShader');

							this.folder.add(this.settings, 'bias', 0, 1, 0.025).name('Bias').onChange(updateUniforms);
							this.folder.add(this.settings, 'noiseFuncionType', { 'Classic': 0, 'Ken Perlin': 1, 'Simplex': 2, 'Gradient': 3, 'Fbm': 4, 'Summed Simplex': 5 }).name('Noise Implementation').onChange(updateUniforms);
							this.folder.add(this.settings, 'blackAndWhite').name('B & W').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplierX', 0, 0.1, 0.0001).name('Noise X Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplierY', 0, 0.1, 0.0001).name('Noise Y Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'octaves', 1, 12, 1).name('Noise Octaves').onChange(updateUniforms);
							this.folder.add(this.settings, 'amplitude', 0.00, 2.00, 0.01).name('Noise Amplitude').onChange(updateUniforms);
							this.folder.add(this.settings, 'frequency', 0.25, 2.00, 0.05).name('Noise Frequency').onChange(updateUniforms);
							this.folder.add(this.settings, 'lacunarity', 0.20, 4.00, 0.1).name('Noise Lacunarity').onChange(updateUniforms);
							this.folder.add(this.settings, 'persistence', 0.20, 4.00, 0.1).name('Noise Persistence').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					VisualizeRandomShaderPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new ShaderPass(Shaders.VisualizeRandomShader);

							this.settings = {
								bias: 0.0,
								randomFuncionType: 0,
								blackAndWhite: false,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.bias.value = self.settings.bias;
								self.pass.uniforms.randomFuncionType.value = self.settings.randomFuncionType;
								self.pass.uniforms.blackAndWhite.value = self.settings.blackAndWhite;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('VisualizeRandomShader');

							this.folder.add(this.settings, 'bias', 0, 1, 0.025).name('Bias').onChange(updateUniforms);
							this.folder.add(this.settings, 'randomFuncionType', { 'Lygia': 0, '1-liner': 1, 'Golden Ratio': 2, 'Improved 1-liner': 3, 'Int Hash': 4 }).name('Random Implementation').onChange(updateUniforms);
							this.folder.add(this.settings, 'blackAndWhite').name('B & W').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					NoisePixelDisplacePassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.NoisePixelDisplacePass();

							this.settings = {
								minXOffset: -10,
								maxXOffset: 10,
								minYOffset: -10,
								maxYOffset: 10,
								multiplierX: 0.01,
								multiplierY: 0.01,
								octaves: 4,
								amplitude: 1.0,
								frequency: 1.00,
								lacunarity: 2.00,
								persistence: 0.50,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.minXOffset.value = self.settings.minXOffset;
								self.pass.uniforms.maxXOffset.value = self.settings.maxXOffset;
								self.pass.uniforms.minYOffset.value = self.settings.minYOffset;
								self.pass.uniforms.maxYOffset.value = self.settings.maxYOffset;
								self.pass.uniforms.multiplier.value = new THREE.Vector3(self.settings.multiplierX, self.settings.multiplierY, 1.0);
								self.pass.uniforms.octaves.value = self.settings.octaves;
								self.pass.uniforms.amplitude.value = self.settings.amplitude;
								self.pass.uniforms.frequency.value = self.settings.frequency;
								self.pass.uniforms.lacunarity.value = self.settings.lacunarity;
								self.pass.uniforms.persistence.value = self.settings.persistence;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('NoisePixelDisplacePass');

							this.folder.add(this.settings, 'minXOffset', -100, 0, 1.0).name('Min X-Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'maxXOffset', 0, 100, 1.0).name('Max X-Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'minYOffset', -100, 0, 1.0).name('Min Y-Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'maxYOffset', 0, 100, 1.0).name('Max Y-Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplierX', 0, 0.1, 0.0001).name('Noise X Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'multiplierY', 0, 0.1, 0.0001).name('Noise Y Multiplier').onChange(updateUniforms);
							this.folder.add(this.settings, 'octaves', 1, 4, 1).name('Noise Octaves').onChange(updateUniforms);
							this.folder.add(this.settings, 'amplitude', 0.00, 2.00, 0.01).name('Noise Amplitude').onChange(updateUniforms);
							this.folder.add(this.settings, 'frequency', 0.25, 2.00, 0.05).name('Noise Frequency').onChange(updateUniforms);
							this.folder.add(this.settings, 'lacunarity', 0.20, 4.00, 0.1).name('Noise Lacunarity').onChange(updateUniforms);
							this.folder.add(this.settings, 'persistence', 0.20, 4.00, 0.1).name('Noise Persistence').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					RandomPixelDisplacePassContainer: 
					{
						pass: null,
						folder: null,
						init: function()
						{
							this.pass = new ShaderPass(Shaders.RandomPixelDisplaceShader);
							this.pass.enabled = false;
							this.folder = Shaders.RandomPixelDisplaceShader.addGuiFolder(_gui, this.pass);
						},
					},

					UvVisualizerPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.UvVisualizerPass();

							this.settings = {
								visualizeX: true,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.visualizeX.value = self.settings.visualizeX;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('UvVisualizerPass');

							this.folder.add(this.settings, 'visualizeX').name('Visualize X').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					MondriaanLinesPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.MondriaanLinesPass();

							this.settings = {
								minOffset: -0.1,
								maxOffset: 0.1,
							};

							function updateUniforms()
							{
								self.pass.uniforms.resolution.value = new THREE.Vector2(_canvasWidth, _canvasHeight);
								self.pass.uniforms.minOffset.value = self.settings.minOffset;
								self.pass.uniforms.maxOffset.value = self.settings.maxOffset;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('MondriaanLinesPass');

							this.folder.add(this.settings, 'minOffset', -0.25, 0, 0.001).name('Min Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'maxOffset',  0, 0.25, 0.001).name('Max Offset').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					},

					RandomPixelStretchPassContainer: 
					{
						pass: null,
						settings: null,
						folder: null,
						enabled: false,
						init: function()
						{
							const self = this;

							this.pass = new Postprocessing.RandomPixelStretchPass();

							this.settings = {
								minOffset: -0.1,
								maxOffset: 0.1,
							};

							function updateUniforms()
							{
								self.pass.uniforms.minOffset.value = self.settings.minOffset;
								self.pass.uniforms.maxOffset.value = self.settings.maxOffset;
								self.pass.enabled = self.enabled;
							}

							this.folder = _gui.addFolder('RandomPixelStretchPass');

							this.folder.add(this.settings, 'minOffset', -0.25, 0, 0.001).name('Min Offset').onChange(updateUniforms);
							this.folder.add(this.settings, 'maxOffset',  0, 0.25, 0.001).name('Max Offset').onChange(updateUniforms);
							this.folder.add(this, 'enabled').name('Enable/disable').onChange(updateUniforms);

							updateUniforms();
						},
					}
				};

				_camera = new THREE.PerspectiveCamera( _fov, _canvasWidth / _canvasHeight, _near, _far);
				_camera.position.set(0, 2.5, 7.5 );
				_camera.lookAt(0, 0, 0 );

				_scene = new THREE.Scene();

				const loader = new THREE.CubeTextureLoader();
				const texture = loader.load([
					'/media/textures/cube/park2/posx.jpg',
					'/media/textures/cube/park2/negx.jpg',
					'/media/textures/cube/park2/posy.jpg',
					'/media/textures/cube/park2/negy.jpg',
					'/media/textures/cube/park2/posz.jpg',
					'/media/textures/cube/park2/negz.jpg',
				]);
				_scene.background = texture;				
				// _scene.background = new THREE.Color( 0xffffff );

				const lights = [];

				for(var i = 0; i < 3; i++)
				{
					lights[ i ] = new THREE.DirectionalLight( 0xffffff, 3 );

					lights[ i ].castShadow = true;
					lights[ i ].shadow.bias = -0.001;
					lights[ i ].shadow.mapSize.width = 2048;
					lights[ i ].shadow.mapSize.height = 2048;
					lights[ i ].shadow.camera.near = 0.1;
					lights[ i ].shadow.camera.far = 500.0;
					lights[ i ].shadow.camera.near = 0.5;
					lights[ i ].shadow.camera.far = 500.0;
					lights[ i ].shadow.camera.left = 100;
					lights[ i ].shadow.camera.right = -100;
					lights[ i ].shadow.camera.top = 100;
					lights[ i ].shadow.camera.bottom = -100;

					_scene.add( lights[ i ] );
				}

				lights[ 0 ].position.set( 0, 200, 0 );
				lights[ 1 ].position.set( 100, 200, 100 );
				lights[ 2 ].position.set( - 100, - 200, - 100 );


				const controls = new OrbitControls(_camera, _renderer.domElement);
    			controls.update();

				const plane = new THREE.Mesh(
					new THREE.PlaneGeometry(10, 10, 10, 10),
					new THREE.MeshStandardMaterial({
						color: 0xFFFF00,
					}));
				plane.castShadow = false;
				plane.receiveShadow = true;
				plane.position.y = -1;
				plane.rotation.x = -Math.PI / 2;
				_scene.add(plane);				
			
				// -----------------------
	
			let mesh = new THREE.Mesh( 
				new THREE.SphereGeometry( 1, 16, 8 ), 
				new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } ) );
			mesh.castShadow = true;
			mesh.position.x = 0;
			mesh.position.y = 0.5;
			mesh.position.z = -3;
			// mesh.receiveShadow = true;
			_meshes.push(mesh);
			_scene.add(mesh);

			mesh = new THREE.Mesh( 
				new THREE.BoxGeometry( 1, 1, 1 ), 
				new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } ) );
			mesh.castShadow = true;
			mesh.position.x = -2;
			mesh.position.y = 0.5;
			mesh.position.z = -3;
			// mesh.receiveShadow = true;
			_meshes.push(mesh);
			_scene.add(mesh);			

			mesh = new THREE.Mesh( 
				new THREE.TorusGeometry( 0.5, 0.25, 16, 100 ), 
				new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } ) );
			mesh.castShadow = true;
			mesh.position.x = 2;
			mesh.position.y = 0.5;
			mesh.position.z = -3;
			// mesh.receiveShadow = true;
			_meshes.push(mesh);
			_scene.add(mesh);	

			mesh = new THREE.Mesh( 
				new THREE.CapsuleGeometry( 0.5, 0.5, 4, 8 ), 
				new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } ) );
			mesh.castShadow = true;
			mesh.position.x = 2;
			mesh.position.y = 0.5;
			mesh.position.z = 0;
			// mesh.receiveShadow = true;
			_meshes.push(mesh);
			_scene.add(mesh);	
		
				// -----------------------

				_gui = new GUI();

				// -----------------------

				_effectsComposer = new EffectComposer( _renderer );

				const renderPass = new RenderPass( _scene, _camera );
				_effectsComposer.addPass( renderPass );

				let shaderEnabled = false;

				Object.keys(_postprocessingPassesLiteral).forEach(function(key, index) 
				{
					if(_postprocessingPassesLiteral[key].init !== undefined && _postprocessingPassesLiteral[key].init !== null)
					{
						_postprocessingPassesLiteral[key].init();
					}
					
					if(_postprocessingPassesLiteral[key].folder !== undefined && _postprocessingPassesLiteral[key].folder !== null)
					{
						_postprocessingPassesLiteral[key].folder.close();
					}
					
					_effectsComposer.addPass(_postprocessingPassesLiteral[key].pass);
				});				

				Object.keys(_postprocessingPassesLiteral).forEach(function(key, index) 
				{
					if(!shaderEnabled && _postprocessingPassesLiteral[key].enabled)
					{
						_postprocessingPassesLiteral[key].folder.open();
						shaderEnabled = true;
					}
				});				

				if(!shaderEnabled)
				{
					Object.keys(_postprocessingPassesLiteral).forEach(function(key, index) 
					{
						if(!shaderEnabled)
						{
							_postprocessingPassesLiteral[key].enabled = true;
							_postprocessingPassesLiteral[key].folder.open();
							shaderEnabled = true;							
						}
					});				
				}


				const outputPass = new OutputPass();
				_effectsComposer.addPass( outputPass );				

				// -----------------------

				window.addEventListener( 'resize', onWindowResize );

				_clock = new THREE.Clock();
			}

			function onWindowResize() {

				_camera.aspect = _canvasWidth / _canvasHeight;
				_camera.updateProjectionMatrix();

				_renderer.setSize( _canvasWidth, _canvasHeight );
				_effectsComposer.setSize( _canvasWidth, _canvasHeight );
			}

			function update() 
			{
				const elapsed = _clock.getDelta();
				const time = _clock.elapsedTime;

				_meshes.forEach(m => {
					m.rotation.y += 0.01;
				});

			
				Object.keys(_postprocessingPassesLiteral).forEach(function(key, index) 
				{
					if(_postprocessingPassesLiteral[key].update !== undefined)
					{
						_postprocessingPassesLiteral[key].update();
					}
				});		

				render();
			}

			function render() 
			{
				_effectsComposer.render();
			}

			function _downloadWebGLRenderer()
			{
				const maxHiresW = 3200;
				const maxHiresH = 3200;

				if(_canvasWidth > maxHiresW || _canvasHeight > maxHiresH)
				{
					_downloadWebGLRendererHires();

					return;
				}
				else
				{
					_renderer.render(_scene, _camera);

					_downloadCanvasAsPng(_renderer.domElement);
				}

			}

			function _downloadWebGLRendererHires()
			{
				const maxW = 1600;
				const maxH = 1600;

				const d = new Date();
				const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

				for (let y = 0; y < _canvasHeight; y += maxH)
				{
					for (let x = 0; x < _canvasWidth; x += maxW)
					{
						let w = Math.min(_canvasWidth - x, maxW);
						let h = Math.min(_canvasHeight - y, maxH);

						// console.log(prefix + '-' + x + '-' + y + '.png');

						_renderer.setSize( w, h );

						_camera.setViewOffset(_canvasWidth, _canvasHeight, x, y, w, h);
						
						_renderer.render(_scene, _camera);

						_downloadCanvasAsPng(_renderer.domElement, prefix + '-' + x + '-' + y + '.png');
					}
				}

				_renderer.setSize( _canvasWidth, _canvasHeight );

				_camera.clearViewOffset();
			}

			function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			{
				let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

				webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

				var canvas = document.createElement('canvas');

				canvas.width = webGLRenderTarget.width;
				canvas.height = webGLRenderTarget.height;

				var context = canvas.getContext('2d');

				context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

				_downloadCanvasAsPng(canvas);
			}

			function _downloadCanvasAsPng(canvas, name)
			{
				if(name === null || name === undefined || name === "")
				{
					var d = new Date();

					name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
				}

				canvas.toBlob(function (blob) {
					var a = document.createElement('a');
					var url = URL.createObjectURL(blob);
					a.href = url;
					a.download = name;
					a.click();
				}, 'image/png', 1.0); 
			}

		</script>

	</body>
</html>