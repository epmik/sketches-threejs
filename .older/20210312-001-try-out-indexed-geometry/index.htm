<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>My first three.js app</title>
		<style>
			body { margin: 0; }
		</style>
	</head>
	<body>
		<script type="text/javascript" src="/node_modules/three/build/three.min.js"></script>
		<script type="text/javascript" src="/node_modules/stats.js/build/stats.min.js"></script>
		<script type="text/javascript" src="/node_modules/dat.gui/build/dat.gui.min.js"></script>
		<script type="text/javascript" src="/node_modules/delaunator/delaunator.min.js"></script>
		<script type="text/javascript" src="/node_modules/simplex-noise/simplex-noise.js"></script>
		<script type="text/javascript" src="/node_modules/alea/alea.js"></script>

		<script type="module">

			let camera, scene, renderer, stats;

			let mesh;

			init();
			animate();

			function init() {

				//

				camera = new THREE.PerspectiveCamera( 27, window.innerWidth / window.innerHeight, 1, 3500 );
				camera.position.z = 64;

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0x050505 );

				//

				const light = new THREE.HemisphereLight();
				scene.add( light );

				//

				const geometry = new THREE.BufferGeometry();

				const indices = [];

				const vertices = [];
				const normals = [];
				const colors = [];

				const size = 20;
				const segments = 10;

				const halfSize = size / 2;
				const segmentSize = size / segments;

				// generate vertices, normals and color data for a simple grid geometry

				for ( let i = 0; i <= segments; i ++ ) {

					const y = ( i * segmentSize ) - halfSize;

					for ( let j = 0; j <= segments; j ++ ) {

						const x = ( j * segmentSize ) - halfSize;

						vertices.push( x, - y, 0 );
						normals.push( 0, 0, 1 );

						const r = ( x / size ) + 0.5;
						const g = ( y / size ) + 0.5;

						colors.push( r, g, 1 );

					}

				}

				// generate indices (data for element array buffer)

				for ( let i = 0; i < segments; i ++ ) {

					for ( let j = 0; j < segments; j ++ ) {

						const a = i * ( segments + 1 ) + ( j + 1 );
						const b = i * ( segments + 1 ) + j;
						const c = ( i + 1 ) * ( segments + 1 ) + j;
						const d = ( i + 1 ) * ( segments + 1 ) + ( j + 1 );

						// generate two faces (triangles) per iteration

						indices.push( a, b, d ); // face one
						indices.push( b, c, d ); // face two

					}

				}

				//

				geometry.setIndex( indices );
				geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
				geometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );
				geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );

				const material = new THREE.MeshPhongMaterial( {
					side: THREE.DoubleSide,
					vertexColors: true
				} );

				mesh = new THREE.Mesh( geometry, material );
				scene.add( mesh );

				//

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				//

				stats = new Stats();
				document.body.appendChild( stats.dom );

				//

				const gui = new dat.GUI();
				gui.add( material, 'wireframe' );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				const time = Date.now() * 0.001;

				mesh.rotation.x = time * 0.25;
				mesh.rotation.y = time * 0.5;

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>