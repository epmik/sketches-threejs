<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - VSM Shadows example </title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
	</head>
	<body>
		<div id="info">
		<a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> - VSM Shadows example by <a href="https://github.com/supereggbert">Paul Brunt</a>
		</div>

		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "../scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js"
				}
			}
		</script>

		<script type="module">

			import * as THREE from 'three';

			import Stats from 'three/addons/libs/stats.module.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
            import { RandomGenerator } from '/js/RandomGenerator.js';
			import { OpenSimplexNoiseGenerator } from '/js/OpenSimplexNoiseGenerator.js';
			import { SummedNoiseGenerator } from '/js/SummedNoiseGenerator.js';

			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

			let camera, scene, renderer, clock, stats;
			let dirLight, spotLight;
			let torusKnot, dirGroup;
			let _noiseGenerator, _randomGenerator;

			init();

			function init() {

				_randomGenerator = new RandomGenerator(1024);
				_noiseGenerator = new OpenSimplexNoiseGenerator(1024);

				initScene();
				initMisc();

				// Init gui
				const gui = new GUI();

				const config = {
					spotlightRadius: 0,
					spotlightSamples: 8,
					dirlightRadius: 0,
					dirlightSamples: 8
				};

				const dirlightFolder = gui.addFolder( 'Directional Light' );
				dirlightFolder.add( config, 'dirlightRadius' ).name( 'radius' ).min( 0 ).max( 25 ).onChange( function ( value ) {

					dirLight.shadow.radius = value;

				} );

				dirlightFolder.add( config, 'dirlightSamples', 1, 25, 1 ).name( 'samples' ).onChange( function ( value ) {

					dirLight.shadow.blurSamples = value;

				} );
				dirlightFolder.open();

				document.body.appendChild( renderer.domElement );
				window.addEventListener( 'resize', onWindowResize );

			}

			function initScene() {

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.set( 0, 10, 30 );

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0x222244 );

				// Lights

				scene.add( new THREE.AmbientLight( 0x444444 ) );

				dirLight = new THREE.DirectionalLight( 0xffffff, 3 );
				dirLight.position.set( 30, 120, 170 );
				dirLight.castShadow = true;
				dirLight.shadow.camera.near = 0.1;
				dirLight.shadow.camera.far = 500;
				dirLight.shadow.camera.right = 17;
				dirLight.shadow.camera.left = - 17;
				dirLight.shadow.camera.top	= 17;
				dirLight.shadow.camera.bottom = - 17;
				dirLight.shadow.mapSize.width = 2048;
				dirLight.shadow.mapSize.height = 2048;
				dirLight.shadow.radius = 4;
				dirLight.shadow.bias = -0.0005;

				dirGroup = new THREE.Group();
				dirGroup.add( dirLight );
				scene.add( dirGroup );

				const noiseMultiplier = 0.125;

				for(let z = 0; z < 10; z++)
				{
					for(let y = 0; y < 10; y++)
					{
						for(let x = 0; x < 10; x++)
						{
							let v = _noiseGenerator.Value(x * noiseMultiplier, y * noiseMultiplier, z * noiseMultiplier);

							// console.log(v);

							if( v < 0.5)
							{
								continue;								
							}

							const c = new THREE.Color().setRGB(_randomGenerator.Value());

							const cube1 = new THREE.Mesh( new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshLambertMaterial( { color: c, emissive: 0x200000 } ) );
							cube1.castShadow = true;
							cube1.receiveShadow = true;
							cube1.position.set(x, y, z);
							scene.add( cube1 );
						}
					}
				}

				const c = new THREE.Color().setRGB(_randomGenerator.Value());

				scene.fog = new THREE.Fog( 0xff0000, 50, 100 );

				const planeGeometry = new THREE.PlaneGeometry( 200, 200 );
				const planeMaterial = new THREE.MeshPhongMaterial( {
					color: c,
					shininess: 0,
					specular: 0x111111
				} );

				const ground = new THREE.Mesh( planeGeometry, planeMaterial );
				ground.rotation.x = - Math.PI / 2;
				ground.scale.multiplyScalar( 3 );
				ground.castShadow = true;
				ground.receiveShadow = true;
				scene.add( ground );

			}

			function initMisc() {

				renderer = new THREE.WebGLRenderer( { antialias: true, samples: 4, stencil: true, alpha: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.setAnimationLoop( animate );
				renderer.shadowMap.enabled = true;
				renderer.shadowMap.type = THREE.VSMShadowMap;

				// Mouse control
				const controls = new OrbitControls( camera, renderer.domElement );
				controls.target.set( 0, 2, 0 );
				controls.update();

				clock = new THREE.Clock();

				stats = new Stats();
				document.body.appendChild( stats.dom );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate( time ) {

				const delta = clock.getDelta();

				renderer.render( scene, camera );

				stats.update();

			}

		</script>
	</body>
</html>
