<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>
        <div id="sketch-container"></div>
		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "../scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js"
				}
			}
		</script>

        <script type="module">

            import * as THREE from 'three';
			import * as Scrblr from 'scrblr';
			// import { Sketch } from './js/sketch.js';
            import { Graphics } from './js/Graphics.js';
            import { RandomGenerator } from '/js/RandomGenerator.js';
			import { OpenSimplexNoiseGenerator } from '/js/OpenSimplexNoiseGenerator.js';
			import { SummedNoiseGenerator } from '/js/SummedNoiseGenerator.js';
			import { LinearGradient } from '/js/LinearGradient.js';
			import { MathUtility } from '/js/MathUtility.js';
			import { Color } from '/js/Color.js';
			import Stats from 'three/addons/libs/stats.module.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import alea from 'https://cdn.jsdelivr.net/npm/alea@1.0.1/+esm'
			import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
			import * as Shaders from './.shaders/Export.module.js';
			import * as Postprocessing from './.postprocessing/Export.module.js';
            import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
			import { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';
			import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
			import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
            import { ClearPass } from 'three/addons/postprocessing/ClearPass.js';
            import { MaskPass, ClearMaskPass } from 'three/addons/postprocessing/MaskPass.js';
            import { CopyShader } from 'three/addons/shaders/CopyShader.js';
			import { LuminosityShader } from 'three/addons/shaders/LuminosityShader.js';
            import { FXAAShader } from 'three/addons/shaders/FXAAShader.js';
            import { Line2 } from "three/addons/lines/Line2.js";
            import { LineSegments2 } from "three/addons/lines/LineSegments2.js";
            import { LineMaterial } from "three/addons/lines/LineMaterial.js";
            import { LineGeometry } from "three/addons/lines/LineGeometry.js";
            import { LineSegmentsGeometry } from "three/addons/lines/LineSegmentsGeometry.js";
            import { PNG } from 'pngjs';

            let _screenCapturePrefix = "20241111-001-geometry-gradient-background";
            let _renderer, _camera, _stats, _orbitControls;
            let _composer, _composerClearPass, _composerMaskPass, _composerClearMaskPass; 
            let _canvasWidth = 800, _canvasHeight = 800;
            let _near = 1, _far = 8000, _fov = 60;
			let _gui;
            let _clock, _deltaTimeSeconds;
            let _frameCount = 0;

            let _randomGenerator;       
            let _noiseGenerator;       

            let _backgroundLinearGradient, _sunLinearGradient;
            let _graphics, _maskGraphics, _backgroundGraphics;

            let _settings = 
            {
                downloadWebGLRendererAction: function () { _downloadWebGLRenderer(); },
                downloadWebGLRendererHiresAction: function () { _downloadWebGLRenderer(4); },
                saveTransparentBackground: true,
                enableMask: true,
                sunRayCount: 720
            };

            init(); 

            async function init() {

                const container = document.getElementById( 'sketch-container' );

                _randomGenerator = new RandomGenerator();
                _noiseGenerator = new OpenSimplexNoiseGenerator();

                _canvasWidth = _canvasWidth === undefined ? window.innerWidth : _canvasWidth;
                _canvasHeight = _canvasHeight === undefined ? window.innerHeight : _canvasHeight;

                // --------------------

                _renderer = new THREE.WebGLRenderer( { antialias: true, samples: 4, stencil: true, alpha: true } );
                _renderer.setPixelRatio( window.devicePixelRatio );
                _renderer.setSize( _canvasWidth, _canvasHeight );
                _renderer.setClearColor( 0xffffff, 1 );
                // _renderer.shadowMap.enabled = true;
                _renderer.autoClear = false;

                container.appendChild( _renderer.domElement );

                // --------------------

				_gui = new GUI();

				// -----------------------

                _camera = new THREE.OrthographicCamera( -1, 1, 1, -1, _near, _far);
                _camera.position.set( 0, 0, 10);
                _camera.lookAt( 0, 0, 0 );

                // _camera = new THREE.PerspectiveCamera( _fov, _canvasWidth / _canvasHeight, _near, _far);
				// _camera.position.z = 10;

                _orbitControls = new OrbitControls( _camera, _renderer.domElement );
				_orbitControls.minDistance = 2;
				_orbitControls.maxDistance = 12;
				_orbitControls.maxPolarAngle = Math.PI / 2;
				_orbitControls.target.set( 0, 0, 0 );
				_orbitControls.update();                
               
                _graphics = new Graphics(_camera, _renderer);
                _maskGraphics = new Graphics(_camera, _renderer);
                _backgroundGraphics = new Graphics(_camera, _renderer);

                // ----------------------

	            // _backgroundScene = new THREE.Scene();

                // const _backgroundLights = [];
                // _backgroundLights[ 0 ] = new THREE.DirectionalLight( 0xffffff, 3 );
                // _backgroundLights[ 1 ] = new THREE.DirectionalLight( 0xffffff, 3 );
                // _backgroundLights[ 2 ] = new THREE.DirectionalLight( 0xffffff, 3 );

                // _backgroundLights[ 0 ].position.set( 0, 200, 0 );
                // _backgroundLights[ 1 ].position.set( 100, 200, 100 );
                // _backgroundLights[ 2 ].position.set( - 100, - 200, - 100 );

                // _backgroundScene.add( _backgroundLights[ 0 ] );
                // _backgroundScene.add( _backgroundLights[ 1 ] );
                // _backgroundScene.add( _backgroundLights[ 2 ] );                

                // _backgroundCubeMesh = new THREE.Mesh( 
                //     new THREE.BoxGeometry( 0.25, 0.75, 0.25 ), 
                //     new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } )); 
                
                // _backgroundScene.add( _backgroundCubeMesh );                

                // ----------------------

				_composerClearPass = new ClearPass(0xffffff, _settings.saveTransparentBackground == true ? 0.0 : 1.0);
				
				var backgroundRenderPass = new RenderPass(_backgroundGraphics.scene, _camera );
				backgroundRenderPass.clear = false;
				
				_composerMaskPass = new MaskPass( _maskGraphics.scene, _camera );
				_composerMaskPass.inverse = false;
                _composerMaskPass.enabled = _settings.enableMask;
				_composerMaskPass.clear = false;
				
				var renderPass = new RenderPass(_graphics.scene, _camera );
				renderPass.clear = false;
				// renderPass.clearColor = false;
				// renderPass.clearDepth = true;
				// renderPass.clearStencil = false;

				_composerClearMaskPass = new ClearMaskPass();
                _composerClearMaskPass.enabled = _settings.enableMask;

                let randomPixelDisplaceShaderPass = new ShaderPass(Shaders.RandomPixelDisplaceShader);
				Shaders.RandomPixelDisplaceShader.addGuiFolder(_gui, randomPixelDisplaceShaderPass);
				
				var parameters = {
						minFilter: THREE.LinearFilter,
						magFilter: THREE.LinearFilter,
						format: THREE.RGBAFormat,
						stencilBuffer: true,	        // important! disable stencil buffer writes
                        depthBuffer: true,              // enable depth buffer writes
                        samples: 8                      // multi sampling
					};

				var renderTarget = new THREE.WebGLRenderTarget( _canvasWidth, _canvasHeight, parameters );

				_composer = new EffectComposer( _renderer, renderTarget );
				_composer.addPass( _composerClearPass );
				_composer.addPass( backgroundRenderPass );
				_composer.addPass( _composerMaskPass );
				_composer.addPass( new Postprocessing.ClearDepthPass());
				_composer.addPass( renderPass );
				_composer.addPass( _composerClearMaskPass );
                
                _composer.addPass( new ShaderPass( CopyShader ) );

                _composer.addPass(randomPixelDisplaceShaderPass);

                _composer.addPass( new OutputPass() );				


                // --------------------

                GenerateGradients();

                RenderGradient(_backgroundLinearGradient, _backgroundGraphics);

                RenderGradient(_sunLinearGradient, _graphics);

                // ----------------------

                _maskGraphics.Circle(0, 0, 0.5, 0xffffff);

                for(let c = 0; c < _settings.sunRayCount; c++)
                {
                    RenderRay(0, 0, _randomGenerator.Int(0, 360), _maskGraphics);
                }

                // ----------------------

                _gui.add(_settings, 'downloadWebGLRendererAction').name('Save screen');
                _gui.add(_settings, 'downloadWebGLRendererHiresAction').name('Save hires screen');
                _gui.add(_settings, 'saveTransparentBackground').name('Save transparent background').onChange( function ( val ) { _composerClearPass.clearAlpha = (val == true ? 0 : 1); } );
                _gui.add(_settings, 'enableMask').name('Enable Mask').onChange(function(val) { _composerMaskPass.enabled = val; _composerClearMaskPass.enabled = val; });

                // ----------------------

                _stats = new Stats();
                container.appendChild( _stats.dom );

                // ----------------------

                _renderer.domElement.addEventListener("keydown", onKeyDown, false);
                _renderer.domElement.addEventListener("keyup", onKeyUp, false);
                _renderer.domElement.addEventListener("mousemove", onMouseMove, false);
                _renderer.domElement.addEventListener("mousedown", onMouseDown, false);
                _renderer.domElement.addEventListener("mouseup", onMouseUp, false);

                window.addEventListener( 'resize', onWindowResize );

                _renderer.setAnimationLoop( update );

                // ----------------------

                _clock = new THREE.Clock();

                // ----------------------
            }

            function GenerateGradients()
            {
                _backgroundLinearGradient = new LinearGradient();
                _backgroundLinearGradient.Insert(0, 1, 0, 0, 0.5);
                _backgroundLinearGradient.Insert(0.25, 1, 1, 0, 0.5);
                _backgroundLinearGradient.Insert(0.75, 0, 1, 1, 0.5);
                _backgroundLinearGradient.Insert(1, 0, 0, 1, 0.5);

                _sunLinearGradient = new LinearGradient(_backgroundLinearGradient);
                _sunLinearGradient.Invert();
            }

            function RenderGradient(gradient, graphics)
            {
                let entries = gradient.Entries();

                const _linearGradientGeometryHeight = 1;

                for(var i = 0; i < entries.length - 1; i++)
                {
                    let h = MathUtility.Rebase(entries[i].Time, 0, 1, -1, 1);
                    let hh = MathUtility.Rebase(entries[i+1].Time, 0, 1, -1, 1);

                    let c = entries[i].Color;
                    let cc = entries[i+1].Color;

                    graphics.Quad(
                        -1, h, c.ToInt(), 
                        1, h, c.ToInt(), 
                        -1, hh, cc.ToInt(),
                        1, hh, cc.ToInt());
                }
            }

            function RenderRay(x, y, angle, graphics)
            {
                const minMinWidth = 0.001;
                const maxMinWidth = 0.005;
                const minMaxWidth = 0.010;
                const maxMaxWidth = 0.025;
                const maxLength = 0.95;
                const minLength = 0.1;
                const angleDeviation = MathUtility.ToRadians(8);

                const length = _randomGenerator.Value(minLength, maxLength);
                const minWidth = _randomGenerator.Value(minMinWidth, maxMinWidth);
                const maxWidth = _randomGenerator.Value(minMaxWidth, maxMaxWidth);

                angle = MathUtility.ToRadians(angle);

                angle += _noiseGenerator.Value(angle * 0.1) * angleDeviation;

                const xx = x + Math.sin(angle) * length;
                const yy = x + Math.cos(angle) * length;

                graphics.Line(x, y, 0xff0000, minWidth, xx, yy, 0x000000, maxWidth);
            }

            function Render()
            {
    			_composer.render();
            }

            function update() 
            {
				_deltaTimeSeconds = _clock.getDelta();

                // console.log(_deltaTime);

                // _backgroundCubeMesh.rotation.x += 0.005;
                // _backgroundCubeMesh.rotation.z += 0.01;
           
                Render();

                _stats.update();

                _frameCount++;
            }

            function onKeyDown(event) 
            {
                event.preventDefault();

                var keyCode = event.which;

                switch(keyCode)
                {
                    default: 
                        break;
                }
            };            

            function onKeyUp(event) 
            {
                event.preventDefault();
            };            

            function onMouseDown(event) 
            {
                event.preventDefault();

                switch(event.button)
                {
                    case 0:
                        break;
                }

                // console.log(event.button);
                // console.log(event.buttons);
            }; 

            function onMouseUp(event) 
            {
                event.preventDefault();
            };  

            function onMouseMove(event) 
            {
                event.preventDefault();

                // event.clientX    // The X coordinate of the mouse pointer in viewport coordinates.
                // event.clientY    // The Y coordinate of the mouse pointer in viewport coordinates.
                // event.altKey     // Returns true if the alt key was down when the mouse event was fired.
                // event.ctrlKey    // Returns true if the ctrl key was down when the mouse event was fired.
                // event.shiftKey   // Returns true if the shift key was down when the mouse event was fired.
                // event.button     // The button number that was pressed (if applicable) when the mouse event was fired.
                // event.buttons    // The buttons being pressed (if any) when the mouse event was fired.
                // event.movementX  // The X coordinate of the mouse pointer relative to the position of the last mousemove event.
                // event.movementY  // The Y coordinate of the mouse pointer relative to the position of the last mousemove event.
                // event.screenX    // The X coordinate of the mouse pointer in screen coordinates.
                // event.screenY    // The Y coordinate of the mouse pointer in screen coordinates.
            };            

            function onWindowResize() 
            {
                _camera.aspect = _canvasWidth / _canvasHeight;
                _camera.updateProjectionMatrix();

                _renderer.setSize( _canvasWidth, _canvasHeight );
                _composer.setSize( _canvasWidth, _canvasHeight );
            }

			function _downloadWebGLRenderer(hiresScale)
			{
                hiresScale = (hiresScale === undefined || hiresScale === null || hiresScale == 0 ? 1 : hiresScale);

                const width = Math.round(_canvasWidth * hiresScale);
                const height = Math.round(_canvasHeight * hiresScale);

				const maxW = 2400;
				const maxH = 2400;

				const d = new Date();
				const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

				for (let y = 0; y < height; y += maxH)
				{
					for (let x = 0; x < width; x += maxW)
					{
						let w = Math.min(width - x, maxW);
						let h = Math.min(height - y, maxH);

						_renderer.setSize( w, h );
                        _composer.setSize( w, h );

						_camera.setViewOffset(width, height, x, y, w, h);

                        Render();
					
                        _downloadCanvasAsPng(_renderer.domElement, prefix + '-' + x + '-' + y + '.png');
					}
				}

                _renderer.setSize( _canvasWidth, _canvasHeight );
                _composer.setSize( _canvasWidth, _canvasHeight );

                _camera.clearViewOffset();
			}

			// function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			// {
			// 	let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

			// 	webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

			// 	var canvas = document.createElement('canvas');

			// 	canvas.width = webGLRenderTarget.width;
			// 	canvas.height = webGLRenderTarget.height;

			// 	var context = canvas.getContext('2d');

			// 	context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

			// 	_downloadCanvasAsPng(canvas);
			// }

			function _downloadCanvasAsPng(canvas, name)
			{
				if(name === null || name === undefined || name === "")
				{
					var d = new Date();

					name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
				}

				canvas.toBlob(function (blob) 
                {
                    // console.log(URL.createObjectURL(blob));

                    // PNGImage.readImage(URL.createObjectURL(blob), function (err, image) {
                    //     if (err) console.log(err);

                    //     // The image is in the 'image' variable if everything went well
                    // });                    

                    // blob.arrayBuffer().then((arrayBuffer) => 
                    // {
                    //     new PNG({ filterType: 4 }).parse(arrayBuffer, function (error, data) 
                    //     {
                    //         console.log(error, data);
                    //     });
                    // });

					var a = document.createElement('a');
					var url = URL.createObjectURL(blob);
					a.href = url;
					a.download = name;
					a.click();
				}, 'image/png', 1.0); 
			}

        </script>
    </body>
</html>        