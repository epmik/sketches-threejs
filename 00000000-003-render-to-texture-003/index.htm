<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<script src='https://unpkg.com/three-rt-helper'></script>
	</head>

	<body>
        <div id="canvas-container">
            <div id="gui-container">
            </div>
            <div id="info-container">
                <div id="info-help-container">
                    <div class="clickable" target="F9">Help (F9)</div>
                </div>
                <div id="info-text-container">
                    <div class="clickable" target="F9">Toggle this information - F9</div>
                    <div class="clickable" target="F5">Refresh page - F5</div>
                    <div class="clickable" target="F10">Toggle GUI - F10</div>
                    <div class="clickable" target="F11">Toggle fullscreen - F11</div>
                </div>
            </div>
        </div>
		<script type="importmap">
			{
				"imports": {
					"three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
					"scrblr": "../scrblr/scrblr.module.js",
					"pngjs": "https://cdn.jsdelivr.net/npm/pngjs@7.0.0/+esm",
					"three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
                    "stats-gl": "https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js"
				}
			}
		</script>

        <script type="module">

            import $ from 'https://cdn.jsdelivr.net/npm/jquery@3.7.1/+esm'
            import * as THREE from 'three';
			import * as SCRBLR from 'scrblr';
            import { Graphics } from './js/Graphics.js';
            import { RandomGenerator } from '/js/RandomGenerator.js';
			import { OpenSimplexNoiseGenerator } from '/js/OpenSimplexNoiseGenerator.js';
			import { SummedNoiseGenerator } from '/js/SummedNoiseGenerator.js';
			import { LinearGradient } from '/js/LinearGradient.js';
			import { MathUtility } from '/js/MathUtility.js';
			import { Color } from '/js/Color.js';
			import Stats from 'three/addons/libs/stats.module.js';
			import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import alea from 'https://cdn.jsdelivr.net/npm/alea@1.0.1/+esm'
			import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
			import * as Shaders from './.shaders/Export.module.js';
			import * as Postprocessing from './.postprocessing/Export.module.js';
            import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
			import { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';
			import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
			import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
            import { ClearPass } from 'three/addons/postprocessing/ClearPass.js';
            import { MaskPass, ClearMaskPass } from 'three/addons/postprocessing/MaskPass.js';
            import { CopyShader } from 'three/addons/shaders/CopyShader.js';
			import { LuminosityShader } from 'three/addons/shaders/LuminosityShader.js';
            import { HorizontalBlurShader } from 'three/addons/shaders/HorizontalBlurShader.js';
            import { VerticalBlurShader } from 'three/addons/shaders/VerticalBlurShader.js';
            import { FXAAShader } from 'three/addons/shaders/FXAAShader.js';
            import { Line2 } from "three/addons/lines/Line2.js";
            import { LineSegments2 } from "three/addons/lines/LineSegments2.js";
            import { LineMaterial } from "three/addons/lines/LineMaterial.js";
            import { LineGeometry } from "three/addons/lines/LineGeometry.js";
            import { LineSegmentsGeometry } from "three/addons/lines/LineSegmentsGeometry.js";
            import { PNG } from 'pngjs';

            let _screenCapturePrefix = "00000000-003-render-to-texture-003";
            let _renderer, _stats, _orbitControls;
			let _renderToScreenScene, _renderToScreenCamera;
			let _renderCamera, _renderTarget, _renderScene;

            let _minCanvasWidth = 400, _minCanvasHeight = 400;
            let _canvasWidth = _minCanvasWidth, _canvasHeight = _minCanvasHeight;
            let _near = 1, _far = 8000, _fov = 60;
			let _gui;
            let _clock, _deltaTimeSeconds, _timeUpdateFactor = 0.0150;
            let _frameCount = 0;
			let _mouseTimer = null;
			let _squareCanvas = false;
			let boxMesh, offscreenBoxMesh;

            let _randomGenerator;       
            let _noiseGenerator;       

            let _canvasContainer, _guiContainer;

            const hiresTargetWidth = 4096;
            const hiresTargetHeight = 4096;
            const HiresTargetModeMaximum = 0;   // 0 == maximum size = hiresTargetWidth or hiresTargetHeight   
            const HiresTargetModeMinimum = 1;   // 1 == minimum size = hiresTargetWidth or hiresTargetHeight
            const hiresTargetMode = HiresTargetModeMaximum;            

            let _settings = 
            {
                downloadWebGLRendererAction: function () { _downloadWebGLRenderer(false); },
                downloadWebGLRendererHiresAction: function () { _downloadWebGLRenderer(true); },
                saveoffscreenBufferAction: function () { _saveoffscreenBuffer(true); },
                saveTransparentBackground: true,
            };

            init(); 

            async function init() {

                _canvasContainer = document.getElementById('canvas-container');
                _guiContainer = document.getElementById('gui-container');

                _randomGenerator = new RandomGenerator();
                _noiseGenerator = new OpenSimplexNoiseGenerator();

                // --------------------

                _renderer = new THREE.WebGLRenderer( { antialias: true, samples: 4, stencil: true, alpha: true } );
                _renderer.setPixelRatio( window.devicePixelRatio );
                _renderer.setClearColor( 0xffffff, 1 );
                // _renderer.shadowMap.enabled = true;

                console.log("WebGL2RenderingContext: " + _renderer.capabilities.isWebGL2);
                console.log("Pixel ratio: " + _renderer.getPixelRatio());
                console.log("GL.MAX_TEXTURE_SIZE: " + _renderer.capabilities.maxTextureSize);
                console.log("GL.MAX_SAMPLES: " + _renderer.capabilities.maxSamples);
                console.log("GL.MAX_FRAGMENT_UNIFORM_VECTORS: " + _renderer.capabilities.maxFragmentUniforms);
                console.log("GL.MAX_VARYING_VECTORS: " + _renderer.capabilities.maxVaryings);
                console.log("GL.MAX_VERTEX_UNIFORM_VECTORS: " + _renderer.capabilities.maxVertexUniforms);

                _canvasContainer.appendChild( _renderer.domElement );

                // --------------------

				_gui = new SCRBLR.Gui( { container : _guiContainer, width: 360 });

				// -----------------------

                // _orbitControls = new OrbitControls( _camera, _renderer.domElement );
				// _orbitControls.minDistance = 2;
				// _orbitControls.maxDistance = 12;
				// _orbitControls.maxPolarAngle = Math.PI / 2;
				// _orbitControls.target.set( 0, 0, 0 );
				// _orbitControls.update();     

                // -----

                const renderTargetOptions = 
                { 
                    minFilter: THREE.LinearFilter, 
                    magFilter: THREE.NearestFilter,
					format: THREE.RGBAFormat,       // RGBA for transparent backgrounds
					stencilBuffer: true,	        // enable stencil buffer writes
                    depthBuffer: true,              // enable depth buffer writes
                    samples: 8                      // multi sampling
                };

				_renderTarget = new THREE.WebGLRenderTarget(_canvasWidth * 2, _canvasHeight * 2, renderTargetOptions);
				_renderTarget.background = new THREE.Color( 0xffffff );

				_renderToScreenCamera = new THREE.OrthographicCamera(  - 1, 1, 1, - 1, 0, 1 );
				_renderCamera = new THREE.PerspectiveCamera( _fov, _canvasWidth / _canvasHeight, _near, _far);
				_renderCamera.position.set(0, 0, 10 );

				_renderToScreenScene = new THREE.Scene();
				_renderToScreenScene.background = new THREE.Color( 0xcccccc );

				_renderScene = new THREE.Scene();
				_renderScene.background = new THREE.Color( 0xffde00 );

                // ----------------------

				var offscreenBoxMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
				var offscreenBoxGeometry = new THREE.BoxGeometry( 2, 0.5, 4 );
				offscreenBoxMesh = new THREE.Mesh(offscreenBoxGeometry, offscreenBoxMaterial);
				_renderScene.add(offscreenBoxMesh);

				// -----------------------

				var fullScreenMaterial = new THREE.MeshBasicMaterial({ map: _renderTarget.texture });
				var fullscreenMesh = new SCRBLR.FullScreenMesh(fullScreenMaterial);
				_renderToScreenScene.add(fullscreenMesh);

				// -----------------------

                _gui.g.add(_settings, 'downloadWebGLRendererAction').name('Save screen');
                _gui.g.add(_settings, 'downloadWebGLRendererHiresAction').name('Save hires screen');
				_gui.g.add(_settings, 'saveoffscreenBufferAction').name('Save offscreen buffer');
                _gui.g.add(_settings, 'saveTransparentBackground').name('Save transparent background').onChange( function ( val ) { _clearPass.clearAlpha = (val == true ? 0 : 1); } );

                // ----------------------

                _stats = new Stats();
                _stats.dom.style.top = '16px';
                _stats.dom.style.left = '16px';
                _guiContainer.appendChild( _stats.dom );

                // ----------------------

                window.addEventListener("keydown", onKeyDown, false);
                window.addEventListener("keyup", onKeyUp, false);
                window.addEventListener("mousemove", onMouseMove, false);
                window.addEventListener("mousedown", onMouseDown, false);
                window.addEventListener("mouseup", onMouseUp, false);

                resize();

                window.addEventListener( 'resize', resize );
                window.addEventListener( 'focus', function() { console.log('window focus') } );
                window.addEventListener( 'blur', function() { console.log('window blur') } );

                onMouseMove();

                _renderer.setAnimationLoop( update );

                // ----------------------

                _clock = new THREE.Clock();

                // ----------------------
            }

            function render()
            {
				_renderer.setRenderTarget(_renderTarget);
				_renderer.render( _renderScene, _renderCamera);
				_renderer.setRenderTarget(null);

				_renderer.render( _renderToScreenScene, _renderToScreenCamera );
            }

            function update() 
            {
				_deltaTimeSeconds = _clock.getDelta();
        
				offscreenBoxMesh.rotation.x += _deltaTimeSeconds * 0.500;
				offscreenBoxMesh.rotation.y += _deltaTimeSeconds * 0.250;
                
                render();

                _stats.update();

                _frameCount++;
            }

            function onKeyDown(event) 
            {
                var keyCode = event.which;

                switch(keyCode)
                {
                    case 119: // F8
                        event.preventDefault();
						_squareCanvas = !_squareCanvas;
						resize();
                        break;
                    case 120: // F9
                        event.preventDefault();
                        _toggleInfo();
                        break;
                    case 121: // F10
                        event.preventDefault();
                        _toggleGui();
                        break;
                    case 122: // F11
                        event.preventDefault();
                        _toggleFullscreen(document.body);
                        break;
                    default: 
                        console.log("key down: " + keyCode + ' keyCode');
                        break;
                }
            };            

            function onKeyUp(event) 
            {
                // event.preventDefault();
            };            

            function onMouseDown(event) 
            {
                // event.preventDefault();

                switch(event.button)
                {
                    case 0:
                        break;
                }

                // console.log(event.button);
                // console.log(event.buttons);
            }; 

            function onMouseUp(event) 
            {
                // event.preventDefault();
            };  

            function onMouseMove(event) 
            {
                // event.preventDefault();

                if (_mouseTimer) 
                {
                    window.clearTimeout(_mouseTimer);
                }

                document.body.style.cursor = "default";
                $('#info-container').show(0);

                _mouseTimer = window.setTimeout(_hideCursor, 4000);

                // event.clientX    // The X coordinate of the mouse pointer in viewport coordinates.
                // event.clientY    // The Y coordinate of the mouse pointer in viewport coordinates.
                // event.altKey     // Returns true if the alt key was down when the mouse event was fired.
                // event.ctrlKey    // Returns true if the ctrl key was down when the mouse event was fired.
                // event.shiftKey   // Returns true if the shift key was down when the mouse event was fired.
                // event.button     // The button number that was pressed (if applicable) when the mouse event was fired.
                // event.buttons    // The buttons being pressed (if any) when the mouse event was fired.
                // event.movementX  // The X coordinate of the mouse pointer relative to the position of the last mousemove event.
                // event.movementY  // The Y coordinate of the mouse pointer relative to the position of the last mousemove event.
                // event.screenX    // The X coordinate of the mouse pointer in screen coordinates.
                // event.screenY    // The Y coordinate of the mouse pointer in screen coordinates.
            };            

            function resize() 
            {
				if(_squareCanvas)
				{
					_canvasHeight = _canvasWidth = window.innerWidth < window.innerHeight ? Math.max(window.innerWidth, _minCanvasWidth) : Math.max(window.innerHeight, _minCanvasHeight);
				}
				else
				{
					_canvasWidth = Math.max(window.innerWidth, _minCanvasWidth);
					_canvasHeight = Math.max(window.innerHeight, _minCanvasHeight);
				}

				_renderCamera.aspect = _canvasWidth / _canvasHeight;

				if(_renderCamera instanceof THREE.OrthographicCamera)
				{
					_renderCamera.left = -1 * _renderCamera.aspect;
					_renderCamera.right = 1 * _renderCamera.aspect;
				}

				_renderCamera.updateProjectionMatrix();

                _renderTarget.setSize(_canvasWidth, _canvasHeight );
				_renderer.setSize( _canvasWidth, _canvasHeight );

                // SCRBLR.Utility.UpdateResolutionUniforms(new THREE.Vector2(_canvasWidth, _canvasHeight), _composer.passes);

                console.log("canvas size: " + _canvasWidth + "x" + _canvasHeight);             
                console.log("_renderTarget size: " + _renderTarget.width + "x" + _renderTarget.height);             
            }

			function _downloadWebGLRenderer(hires)
			{
                hires = (hires === undefined || hires === null ? false : hires == true);

				const maxW = hires == true
                                ? hiresTargetWidth < _renderer.capabilities.maxTextureSize ? hiresTargetWidth : _renderer.capabilities.maxTextureSize
                                : _canvasWidth;
				const maxH = hires == true
                                ? hiresTargetHeight < _renderer.capabilities.maxTextureSize ? hiresTargetHeight : _renderer.capabilities.maxTextureSize
                                : _canvasHeight;

                const widthFactor = (maxW / _canvasWidth);
                const heightFactor = (maxH / _canvasHeight);

                const factor = hiresTargetMode == HiresTargetModeMaximum ? Math.min(widthFactor, heightFactor) : Math.max(widthFactor, heightFactor);

                const width = parseInt(factor * _canvasWidth);
                const height = parseInt(factor * _canvasHeight);

				const d = new Date();
				const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

				for (let y = 0; y < height; y += maxH)
				{
					for (let x = 0; x < width; x += maxW)
					{
						let w = Math.min(width - x, maxW);
						let h = Math.min(height - y, maxH);

						_renderTarget.setSize( w, h );
						_renderer.setSize( w, h );
                        // _composer.setSize( w, h );

						_renderCamera.setViewOffset(width, height, x, y, w, h);

                        render();
					
                        _downloadCanvasAsPng(_renderer.domElement, prefix + '-' + x + '-' + y + '.png');
					}
				}

                _renderTarget.setSize( _canvasWidth, _canvasHeight );
                _renderer.setSize( _canvasWidth, _canvasHeight );
                // _composer.setSize( _canvasWidth, _canvasHeight );

                _renderCamera.clearViewOffset();
			}

			function _saveoffscreenBuffer(hiresScale)
			{
                hiresScale = (hiresScale === undefined || hiresScale === null || hiresScale == 0 ? 1 : hiresScale);

                const width = Math.round(1024 * hiresScale);
                const height = Math.round(1024 * hiresScale);

				const maxW = 4096 > _renderer.capabilities.maxTextureSize ? 4096 : _renderer.capabilities.maxTextureSize;
				const maxH = 4096 > _renderer.capabilities.maxTextureSize ? 4096 : _renderer.capabilities.maxTextureSize;

				_renderer.setRenderTarget(_renderTarget);

				_renderer.render( _renderScene, _renderCamera);

				let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

				webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

				var canvas = document.createElement('canvas');

				canvas.width = webGLRenderTarget.width;
				canvas.height = webGLRenderTarget.height;

				var context = canvas.getContext('2d');

				context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

				_downloadCanvasAsPng(canvas);


				// -------------

				// _sketch
				// 	.createRandomPixelTextureAsync( 
				// 	{ 
				// 		offscreenRenderer: _renderTarget,
				// 		coverPercentage : 0.05,
				// 		randomSeed : 0
				// 	})
				// 	.then( () => 
				// 	{
				// 		let buffer = new Uint8ClampedArray(4 * width * height)

				// 		_renderer.readRenderTargetPixels(_renderTarget, 0, 0, width, height, buffer);

				// 		const imageData = new ImageData( buffer, width, height );

				// 		_renderer.setRenderTarget(null);

				// 		var canvas = document.createElement('canvas');

				// 		canvas.width = imageData.width;
				// 		canvas.height = imageData.height;

				// 		var context = canvas.getContext('2d');

				// 		context.putImageData(imageData, 0, 0);

				// 		_saveCanvasAsPng(canvas);
				// 	});
			}

			// function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			// {
			// 	let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

			// 	webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

			// 	var canvas = document.createElement('canvas');

			// 	canvas.width = webGLRenderTarget.width;
			// 	canvas.height = webGLRenderTarget.height;

			// 	var context = canvas.getContext('2d');

			// 	context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

			// 	_downloadCanvasAsPng(canvas);
			// }

			function _downloadCanvasAsPng(canvas, name)
			{
				if(name === null || name === undefined || name === "")
				{
					var d = new Date();

					name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
				}

				canvas.toBlob(function (blob) 
                {
                    // console.log(URL.createObjectURL(blob));

                    // PNGImage.readImage(URL.createObjectURL(blob), function (err, image) {
                    //     if (err) console.log(err);

                    //     // The image is in the 'image' variable if everything went well
                    // });                    

                    // blob.arrayBuffer().then((arrayBuffer) => 
                    // {
                    //     new PNG({ filterType: 4 }).parse(arrayBuffer, function (error, data) 
                    //     {
                    //         console.log(error, data);
                    //     });
                    // });

					var a = document.createElement('a');
					var url = URL.createObjectURL(blob);
					a.href = url;
					a.download = name;
					a.click();
				}, 'image/png', 1.0); 
			}

            $('.clickable').on('click', function(e) 
            {    
                let target = $(this).attr('target');

                switch(target)
                {
                    case 'F9':
                        _toggleInfo();
                        break;
                    case 'F10':
                        _toggleGui();
                        break;
                    case 'F11':
                        _toggleFullscreen();
                        break;
                }
            });

            function _toggleInfo()
            {
                $('#info-help-container').toggle(0);
                $('#info-text-container').toggle(0);
            }

            function _toggleGui()
            {
                $('#gui-container').toggle(0);
            }

            function _toggleFullscreen(element)
            {
                // https://stackoverflow.com/a/47110257/527843

                if(element === undefined || element === null)
                {
                    element = document.body;                    
                }

                if ((document.fullScreenElement !== undefined && document.fullScreenElement === null) || (document.msFullscreenElement !== undefined && document.msFullscreenElement === null) || (document.mozFullScreen !== undefined && !document.mozFullScreen) || (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) 
                {
                    if (element.requestFullScreen) 
                    {
                        element.requestFullScreen();
                    } 
                    else if (element.mozRequestFullScreen) 
                    {
                        element.mozRequestFullScreen();
                    }
                    else if (element.webkitRequestFullScreen) 
                    {
                        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
                    }
                    else if (element.msRequestFullscreen) 
                    {
                        element.msRequestFullscreen();
                    }
                } 
                else 
                {
                    if (document.cancelFullScreen) 
                    {
                        document.cancelFullScreen();
                    } 
                    else if (document.mozCancelFullScreen) 
                    {
                        document.mozCancelFullScreen();
                    } 
                    else if (document.webkitCancelFullScreen) 
                    {
                        document.webkitCancelFullScreen();
                    } 
                    else if (document.msExitFullscreen) 
                    {
                        document.msExitFullscreen();
                    }
                }            
            }

            function _hideCursor() 
            {
                _mouseTimer = null;
                document.body.style.cursor = "none";
                $('#info-container').hide(0);
            }

        </script>
    </body>
</html>        