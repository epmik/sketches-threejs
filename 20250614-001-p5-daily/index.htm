<!DOCTYPE html>
<html lang="en">
	<head>
		<title></title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script type="text/javascript" src="/js/date-extensions.js"></script>
		<!-- <script src='https://unpkg.com/three-rt-helper'></script> -->
	</head>

	<body>
        <div id="canvas-container">
            <div id="gui-container">
            </div>
            <div id="info-container">
                <div id="info-help-container">
                    <div class="clickable" target="F9">Help (F9)</div>
                </div>
                <div id="info-text-container">
                    <div class="clickable" target="F9">Toggle this information - F9</div>
                    <div class="clickable" target="F5">Refresh page - F5</div>
                    <div class="clickable" target="F10">Toggle GUI - F10</div>
                    <div class="clickable" target="F11">Toggle fullscreen - F11</div>
                </div>
            </div>
        </div>

        <script type="module">

            import $ from 'https://cdn.jsdelivr.net/npm/jquery@3.7.1/+esm'
            import P5 from 'https://cdn.jsdelivr.net/npm/p5@1.11.2/+esm';
            import Gui from 'https://cdn.jsdelivr.net/npm/lil-gui@0.20.0/+esm'
            import { RandomGenerator } from './js/RandomGenerator.js';
            import { OpenSimplexNoiseGenerator } from './js/OpenSimplexNoiseGenerator.js';

            let _frameCount = 0;
			let _mouseTimer = null;

            class CircleForm 
            {
                static FormIdRoot = 0;

                constructor(p, x = null, y = null, radius = 50, speed = 100, angle = null)
                {
                    if(x === null || x === undefined || x < 0)
                    {
                        x = p.random.Int(0, p.settings.canvasWidth);
                    }

                    if(y === null || y === undefined || y < 0)
                    {
                        y = p.random.Int(0, p.settings.canvasHeight);
                    }

                    if(angle === null || angle === undefined || angle < 0)
                    {
                        angle = p.random.Single() * Math.PI * 2; // Random angle between 0 and 2*PI
                    }

                    this.id = CircleForm.FormIdRoot++;
                    this.x = x;
                    this.y = y;
                    this.radius = radius;
                    this.speed = speed;
                    this.angle = angle;
                    this.angleStep = p.settings.useAngleStepWhenIntersecting ? p.random.Single(p.settings.minAngleStep, p.settings.maxAngleStep) : 0.0;
                    this.color = p.color(0, 0, 0, 1);
                }

                setColor(color)
                {
                    if(color === undefined || color === null)
                    {
                        color = p.color(0, 0, 0, 1);
                    }

                    this.color = color;
                }

                draw(p) 
                {
                    // p.noFill();

                    // p.circle(this.x, this.y, this.radius * 2.0);
                }
            }

            class MoveStraightBehaviour
            {
                update(p, form) 
                {
                    let elapsed =  p.elapsedFrameTime();

                    form.x += Math.cos(form.angle) * form.speed * elapsed;
                    form.y += Math.sin(form.angle) * form.speed * elapsed;                    
                }
            }

            class ConstrainToCanvasBehaviour
            {
                update(p, form) 
                {
                    if(form.x > -form.radius && form.x < p.settings.canvasWidth + form.radius && form.y > -form.radius && form.y < p.settings.canvasHeight + form.radius)
                    {
                        return; // No need to constrain if within bounds
                    }

                    form.radius = p.random.Single(p.settings.minRadius, p.settings.maxRadius);
                    form.speed = p.random.Single(p.settings.minSpeed, p.settings.maxSpeed);
                    form.angleStep = p.random.Single(p.settings.minAngleStep, p.settings.maxAngleStep);

                    if(p.random.Bool() == true)
                    {
                        form.angleStep = -form.angleStep; // Randomly reverse the angle step direction
                    }

                    if(p.settings.resetFormsOnEdge)
                    {
                        console.log("Resetting form to edge");

                        let edge = p.random.Int(0, 4);

                        switch(edge)
                        {
                            case 0: // Left edge
                                form.x = 0;
                                form.y = p.random.Int(0, p.settings.canvasHeight);
                                form.angle = p.random.Single(-p.Ninety, p.Ninety);
                                break;
                            case 1: // Right edge
                                form.x = p.settings.canvasWidth;
                                form.y = p.random.Int(0, p.settings.canvasHeight);
                                form.angle = p.random.Single(p.Ninety, p.HundredEighty + p.Ninety);
                                break;
                            case 2: // Top edge
                                form.x = p.random.Int(0, p.settings.canvasWidth);
                                form.y = 0;
                                form.angle = p.random.Single(0, p.HundredEighty);
                                break;
                            case 3: // Bottom edge
                                form.x = p.random.Int(0, p.settings.canvasWidth);
                                form.y = p.settings.canvasHeight;
                                form.angle = p.random.Single(p.HundredEighty, p.HundredEighty + p.HundredEighty);
                                break;
                        }
                    }
                    else
                    {
                        console.log("Resetting form to random position and angle");

                        form.x = p.random.Int(0, p.settings.canvasWidth);
                        form.y = p.random.Int(0, p.settings.canvasHeight);
                        form.angle = p.random.Single(0, Math.PI * 2); // Random angle between 0 and 2*PI
                    }
                }
            }

            class OverlappingCirclesCenterVisual
            {
                draw(p) 
                {
                    p.forms.forEach(inner => 
                    {
                        p.forms.forEach(outer => 
                        {
                            if(inner.id === outer.id)
                            {
                                return;
                            }

                            let result = p.intersectResult(inner, outer);

                            if(result.intersects)
                            {
                                let factor = result.distance / result.maxDistance;

                                // let c = p.lerpColor(inner.color, outer.color, factor);
                                let c = p.lerpColor(p.colors.white, p.colors.red, factor);

                                if(p.settings.useAlphaForVisuals)
                                {
                                    c.setAlpha(1);
                                }
                                else
                                {
                                    c.setAlpha(255);
                                }

                                p.stroke(c);
                                p.strokeWeight(1);
                                
                                p.line(outer.x, outer.y, inner.x, inner.y);

                                let elapsed =  p.elapsedFrameTime();

                                inner.angle += inner.angleStep * elapsed; 
                                outer.angle += outer.angleStep * elapsed; 
                            }

                        }); 

                    }); 
                }
            }

			const Sketch = (p) => 
			{            
                p.settings = 
                {
                    canvasWidth: 2048,
                    canvasHeight:2048,
                    randomSeed: null,
                    saveCanvasPrefix: '20250614-001-p5-daily',
                    formCount: 128,
                    minRadius: 50,
                    maxRadius:250,
                    minSpeed:10,
                    maxSpeed:250,
                    resetFormsOnEdge: false,
                    useAlphaForVisuals: true,
                    useAngleStepWhenIntersecting: true,
                    minAngleStep:Math.PI * 0.01,    // 1.8 degrees
                    maxAngleStep:Math.PI * 0.125,   // 22.5 degrees
                    useFixedFrameTime: true, // If true, uses a fixed elapsed time for each frame, useful for debugging
                }

                p.colors = {
                    white : p.color(255, 255, 255),
                    red : p.color(255, 42, 0),
                }

                p.forms = [];
                p.behaviours = [];
                p.visuals = [];

                p.Ninety = Math.PI * 0.5;
                p.HundredEighty = Math.PI;
                p.FixedElapsedTime = 1.0 / 60.0; // 60 FPS
                

				p.setup = () => 
				{
                    p.canvasContainer = document.getElementById('canvas-container');
                    p.guiContainer = document.getElementById('gui-container');

                    p.random = new RandomGenerator(p.settings.randomSeed);
                    p.noiseGenerator = new OpenSimplexNoiseGenerator();

                    console.log("Random seed: " + p.random.Seed());

					p.createCanvas(p.settings.canvasWidth, p.settings.canvasHeight, "webgl");

                    p.resize();


                    p.gui = new Gui({ container : p.guiContainer, width: 360 });

                    p.gui.add(p.settings, 'formCount', 1, 4096);  // int
                    p.gui.add(p.settings, 'resetFormsOnEdge');  // boolean
                    p.gui.add(p.settings, 'useAlphaForVisuals');  // boolean
                    p.gui.add(p.settings, 'useAngleStepWhenIntersecting');  // boolean
                    p.gui.add(p.settings, 'useFixedFrameTime');  // boolean
                    p.gui.add(p, 'saveSketch', 'saveSketch');  // int


                    window.addEventListener( 'focus', function() { console.log('window focus') } );
                    window.addEventListener( 'blur', function() { console.log('window blur') } );

                    p.mouseMoved();

                    for(let i = 0; i < p.settings.formCount; i++)
                    {
                        p.forms.push(new CircleForm(p, null, null, 50, 20, null));
                    }

                    p.behaviours[0] = new MoveStraightBehaviour();
                    p.behaviours[1] = new ConstrainToCanvasBehaviour();

                    p.visuals[0] = new OverlappingCirclesCenterVisual();

                    p.background(255, 255, 255);
                }

                p.intersect = (a, b) => 
				{
                    return p.dist(a.x, a.y, b.x, b.y) < a.radius + b.radius;
				}

                p.intersectResult = (a, b) => 
				{
                    let maxDistance = a.radius + b.radius;
                    let distance = p.dist(a.x, a.y, b.x, b.y);

                    return { 
                        intersects: distance <= maxDistance, 
                        distance: distance,
                        maxDistance: maxDistance,
                    };
				}

                p.elapsedFrameTime = () =>
                {
                    return p.settings.useFixedFrameTime ? p.FixedElapsedTime : p.deltaTime / 1000; // Convert milliseconds to seconds
                }

                p.draw = () => 
				{
                    _frameCount++;

                    p.push();

                    p.translate(-p.settings.canvasWidth / 2, -p.settings.canvasHeight / 2);

                    p.forms.forEach(form => 
                    {
                        p.behaviours.forEach(behaviour => 
                        {
                            behaviour.update(p, form);
                        });

                        form.draw(p);
                    });

                    p.visuals.forEach(visual => 
                    {
                        visual.draw(p);
                    });

                    p.pop();
				}

                p.keyPressed = (event) => 
                {
                    console.log("keyPressed: " + event);
                    
                    var keyCode = event.which;

                    switch(keyCode)
                    {
                        case 83: // s/S
                            event.preventDefault();
                            p.saveSketch();
                            break;
                        case 119: // F8
                            event.preventDefault();
                            break;
                        case 120: // F9
                            event.preventDefault();
                            // _toggleInfo();
                            break;
                        case 121: // F10
                            event.preventDefault();
                            // _toggleGui();
                            break;
                        case 122: // F11
                            event.preventDefault();
                            // _toggleFullscreen(document.body);
                            break;
                        default: 
                            console.log("key pressed: " + keyCode + ' keyCode');
                            break;
                    }

                }

                p.keyReleased = (event) => 
                {
                }

                p.mouseWheel = (event) => 
                {
                    console.log("mouseWheel: " + event);
                }

                p.mouseReleased = (event) => 
                {
                }

                p.mousePressed = (event) => 
                {
                    console.log("mousePressed: " + event);
                }

                p.mouseMoved = (event) => 
                {
                    if (_mouseTimer) 
                    {
                        window.clearTimeout(_mouseTimer);
                    }

                    document.body.style.cursor = "default";
                    $('#info-container').show(0);

                    _mouseTimer = window.setTimeout(_hideCursor, 4000);
                }

                p.resize = () =>
                {
                    // if(_settings.squareCanvas)
                    // {
                    //     _canvasHeight = _canvasWidth = window.innerWidth < window.innerHeight ? Math.max(window.innerWidth, _minCanvasWidth) : Math.max(window.innerHeight, _minCanvasHeight);
                    // }
                    // else
                    // {
                        // p.settings.canvasWidth = Math.max(window.innerWidth, _minCanvasWidth);
                        // p.settings.canvasHeight = Math.max(window.innerHeight, _minCanvasHeight);
                    // }

                    // _camera.aspect = _canvasWidth / _canvasHeight;

                    // if(_camera instanceof THREE.OrthographicCamera)
                    // {
                    //     _camera.left = -1 * _camera.aspect;
                    //     _camera.right = 1 * _camera.aspect;
                    // }

                    // _camera.updateProjectionMatrix();

                    // _renderer.setSize( _canvasWidth, _canvasHeight );
                    // _composer.setSize( _canvasWidth, _canvasHeight );

                    // SCRBLR.Utility.UpdateResolutionUniforms(new THREE.Vector2(_canvasWidth, _canvasHeight), _composer.passes);

					p.resizeCanvas(p.settings.canvasWidth, p.settings.canvasHeight);
                    // _offscreenGraphics.resizeCanvas(_canvasWidth, _canvasHeight);

                    console.log("canvas size: " + p.settings.canvasWidth + "x" + p.settings.canvasHeight);             
                }

				p.windowResized = () => 
				{
                    p.resize();
				}
			
                p.saveSketch = () => 
                {
                    const date = new Date();
                    const name = p.settings.saveCanvasPrefix + '-' + date.yyyymmdd() + '.' + date.hhmmss();
                    
                    p.saveCanvas(name, 'png');                    
                }
            }

			new P5(Sketch, document.getElementById('canvas-container'));

			// function _downloadWebGLRenderer(hiresScale)
			// {
            //     hiresScale = (hiresScale === undefined || hiresScale === null || hiresScale == 0 ? 1 : hiresScale);

            //     const width = Math.round(1024 * hiresScale);
            //     const height = Math.round(1024 * hiresScale);

			// 	const maxW = 4096 > _renderer.capabilities.maxTextureSize ? 4096 : _renderer.capabilities.maxTextureSize;
			// 	const maxH = 4096 > _renderer.capabilities.maxTextureSize ? 4096 : _renderer.capabilities.maxTextureSize;

			// 	const d = new Date();
			// 	const prefix = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss();

			// 	for (let y = 0; y < height; y += maxH)
			// 	{
			// 		for (let x = 0; x < width; x += maxW)
			// 		{
			// 			let w = Math.min(width - x, maxW);
			// 			let h = Math.min(height - y, maxH);

			// 			_renderer.setSize( w, h );
            //             _composer.setSize( w, h );

			// 			_camera.setViewOffset(width, height, x, y, w, h);

            //             Render();
					
            //             _downloadCanvasAsPng(_renderer.domElement, prefix + '-' + x + '-' + y + '.png');
			// 		}
			// 	}

            //     _renderer.setSize( _canvasWidth, _canvasHeight );
            //     _composer.setSize( _canvasWidth, _canvasHeight );

            //     _camera.clearViewOffset();
			// }

			// function _downloadWebGLRenderTarget(webGLRenderer, webGLRenderTarget)
			// {
			// 	let buffer = new Uint8ClampedArray(4 * webGLRenderTarget.width * webGLRenderTarget.height)

			// 	webGLRenderer.readRenderTargetPixels(webGLRenderTarget, 0, 0, webGLRenderTarget.width, webGLRenderTarget.height, buffer);

			// 	var canvas = document.createElement('canvas');

			// 	canvas.width = webGLRenderTarget.width;
			// 	canvas.height = webGLRenderTarget.height;

			// 	var context = canvas.getContext('2d');

			// 	context.putImageData(new ImageData( buffer, webGLRenderTarget.width, webGLRenderTarget.height ), 0, 0);

			// 	_downloadCanvasAsPng(canvas);
			// }

			// function _downloadCanvasAsPng(canvas, name)
			// {
			// 	if(name === null || name === undefined || name === "")
			// 	{
			// 		var d = new Date();

			// 		name = _screenCapturePrefix + '-' + d.yyyymmdd() + '.' + d.hhmmss() +  '.png';
			// 	}

			// 	canvas.toBlob(function (blob) 
            //     {
            //         // console.log(URL.createObjectURL(blob));

            //         // PNGImage.readImage(URL.createObjectURL(blob), function (err, image) {
            //         //     if (err) console.log(err);

            //         //     // The image is in the 'image' variable if everything went well
            //         // });                    

            //         // blob.arrayBuffer().then((arrayBuffer) => 
            //         // {
            //         //     new PNG({ filterType: 4 }).parse(arrayBuffer, function (error, data) 
            //         //     {
            //         //         console.log(error, data);
            //         //     });
            //         // });

			// 		var a = document.createElement('a');
			// 		var url = URL.createObjectURL(blob);
			// 		a.href = url;
			// 		a.download = name;
			// 		a.click();
			// 	}, 'image/png', 1.0); 
			// }

            $('.clickable').on('click', function(e) 
            {    
                let target = $(this).attr('target');

                switch(target)
                {
                    case 'F9':
                        _toggleInfo();
                        break;
                    case 'F10':
                        _toggleGui();
                        break;
                    case 'F11':
                        _toggleFullscreen();
                        break;
                }
            });

            function _toggleInfo()
            {
                $('#info-help-container').toggle(0);
                $('#info-text-container').toggle(0);
            }

            function _toggleGui()
            {
                $('#gui-container').toggle(0);
            }

            function _toggleFullscreen(element)
            {
                // https://stackoverflow.com/a/47110257/527843

                if(element === undefined || element === null)
                {
                    element = document.body;                    
                }

                if ((document.fullScreenElement !== undefined && document.fullScreenElement === null) || (document.msFullscreenElement !== undefined && document.msFullscreenElement === null) || (document.mozFullScreen !== undefined && !document.mozFullScreen) || (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) 
                {
                    if (element.requestFullScreen) 
                    {
                        element.requestFullScreen();
                    } 
                    else if (element.mozRequestFullScreen) 
                    {
                        element.mozRequestFullScreen();
                    }
                    else if (element.webkitRequestFullScreen) 
                    {
                        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
                    }
                    else if (element.msRequestFullscreen) 
                    {
                        element.msRequestFullscreen();
                    }
                } 
                else 
                {
                    if (document.cancelFullScreen) 
                    {
                        document.cancelFullScreen();
                    } 
                    else if (document.mozCancelFullScreen) 
                    {
                        document.mozCancelFullScreen();
                    } 
                    else if (document.webkitCancelFullScreen) 
                    {
                        document.webkitCancelFullScreen();
                    } 
                    else if (document.msExitFullscreen) 
                    {
                        document.msExitFullscreen();
                    }
                }            
            }

            function _hideCursor() 
            {
                _mouseTimer = null;
                document.body.style.cursor = "none";
                $('#info-container').hide(0);
            }

        </script>
    </body>
</html>        